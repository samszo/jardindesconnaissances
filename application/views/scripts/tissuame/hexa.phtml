<!DOCTYPE html>
<html lang="en">
	<head>
		<title></title>
		<meta charset="utf-8">
		<meta name="generator" content="Three.js Editor">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				font-family: sans-serif;
				font-size: 13px;
				background-color: #000;
				margin: 0px;
				overflow: hidden;
			}
		</style>
		<script src="../js/3D/three.min.js"></script>
		<script src="../js/3D/controls/OrbitControls.js"></script>
		<script src="../js/3D/WebGL.js"></script>
		<script src="../js/3D/libs/stats.min.js"></script>
		<script src="../js/3D/libs/dat.gui.min.js"></script>

        <script src="../js/3D/hexasphere.js"></script>
		<script src="../js/jquery.min.js"></script>
	</head>
	<body ontouchstart="">
        <div id="container"></div>
        <script>
            $(window).load(function(){

			if ( WEBGL.isWebGLAvailable() === false ) {
                document.body.appendChild( WEBGL.getWebGLErrorMessage() );
            }

            var params = { opacity: 0.1 };

            var container = document.getElementById('container'), stats;

            var width = $(window).innerWidth();
            var height = $(window).innerHeight()-10;

				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( width, height );
				renderer.shadowMap.enabled = true;
				container.appendChild( renderer.domElement );

				renderer.gammaInput = true;
				renderer.gammaOutput = true;

				stats = new Stats();
                container.appendChild( stats.dom );
                
                var cameraDistance = 65;
                var camera = new THREE.PerspectiveCamera( cameraDistance, width / height, 1, 200);
                camera.position.z = -cameraDistance;

				controls = new THREE.OrbitControls( camera, renderer.domElement );

				window.addEventListener( 'resize', onWindowResize, false );


				var material = new THREE.MeshStandardMaterial( {
                    color: 0x83f52c,
                    opacity: params.opacity,
					transparent: true
				} );

                var gui = new dat.GUI();
				gui.add( params, 'opacity', 0, 1 ).onChange( function () {

					material.opacity = params.opacity;

				} );
				gui.open();

                var scene = new THREE.Scene();
                //scene.fog = new THREE.Fog( 0x000000, cameraDistance*.4, cameraDistance * 1.2);


/* pour obtenir une image à projeter par exemple ../img/equirectangle_projection.png
var img = document.getElementById("projection");
var projectionCanvas = document.createElement('canvas');
var projectionContext = projectionCanvas.getContext('2d');

projectionCanvas.width = img.width;
projectionCanvas.height = img.height;
projectionContext.drawImage(img, 0, 0, img.width, img.height);

var pixelData = null;

var maxLat = -100;
var maxLon = 0;
var minLat = 0;
var minLon = 0;

var isLand = function(lat, lon){

    var x = parseInt(img.width * (lon + 180) / 360);
    var y = parseInt(img.height * (lat+90) / 180);

    if(pixelData == null){
        pixelData = projectionContext.getImageData(0,0,img.width, img.height);
    }
    return pixelData.data[(y * pixelData.width + x) * 4] === 0;
};
*/


var meshMaterials = [];
meshMaterials.push(new THREE.MeshBasicMaterial({color: 0x7cfc00, opacity: params.opacity,transparent: true}));
meshMaterials.push(new THREE.MeshBasicMaterial({color: 0x397d02, opacity: params.opacity,transparent: true}));
meshMaterials.push(new THREE.MeshBasicMaterial({color: 0x77ee00, opacity: params.opacity,transparent: true}));
meshMaterials.push(new THREE.MeshBasicMaterial({color: 0x61b329, opacity: params.opacity,transparent: true}));
meshMaterials.push(new THREE.MeshBasicMaterial({color: 0x83f52c, opacity: params.opacity,transparent: true}));
meshMaterials.push(new THREE.MeshBasicMaterial({color: 0x83f52c, opacity: params.opacity,transparent: true}));
meshMaterials.push(new THREE.MeshBasicMaterial({color: 0x4cbb17, opacity: params.opacity,transparent: true}));
meshMaterials.push(new THREE.MeshBasicMaterial({color: 0x00ee00, opacity: params.opacity,transparent: true}));
meshMaterials.push(new THREE.MeshBasicMaterial({color: 0x00aa11, opacity: params.opacity,transparent: true}));

var oceanMaterial = []
oceanMaterial.push(new THREE.MeshBasicMaterial({color: 0x0f2342, transparent: true}));
oceanMaterial.push(new THREE.MeshBasicMaterial({color: 0x0f1e38, transparent: true}));

var introTick = 0;
var seenTiles = {};
var currentTiles = [];

var createScene = function(radius, divisions, tileSize){
    introTick = -1;
    while(scene.children.length > 0){ 
        scene.remove(scene.children[0]); 
    }
    var hexasphere = new Hexasphere(radius, divisions, tileSize);
    for(var i = 0; i< hexasphere.tiles.length; i++){
        var t = hexasphere.tiles[i];
        var latLon = t.getLatLon(hexasphere.radius);

        var geometry = new THREE.Geometry();

        for(var j = 0; j< t.boundary.length; j++){
            var bp = t.boundary[j];
            geometry.vertices.push(new THREE.Vector3(bp.x, bp.y, bp.z));
        }

        var color = new THREE.Color( 0xffaa00 ); //optional

        geometry.faces.push(new THREE.Face3(0,1,2,null,color));
        geometry.faces.push(new THREE.Face3(0,2,3,null,color));
        geometry.faces.push(new THREE.Face3(0,3,4,null,color));
        if(geometry.vertices.length > 5){
            geometry.faces.push(new THREE.Face3(0,4,5,null,color));
        }

        /*pour changer la couleur de l'hexagone suivant l'image modèle
        if(isLand(latLon.lat, latLon.lon)){
            material = meshMaterials[Math.floor(Math.random() * meshMaterials.length)]
        } else {
            material = oceanMaterial[Math.floor(Math.random() * oceanMaterial.length)]
        }
        material.opacity = 0.3;
        */
        //material = meshMaterials[Math.floor(Math.random() * meshMaterials.length)]

        var mesh = new THREE.Mesh(geometry, material.clone());
        scene.add(mesh);
        hexasphere.tiles[i].mesh = mesh;

    }

    seenTiles = {};
    
    currentTiles = hexasphere.tiles.slice().splice(0,12);
    currentTiles.forEach(function(item){
        seenTiles[item.toString()] = 1;
        item.mesh.material.opacity = 1;
    });

    window.hexasphere = hexasphere;
    introTick = 0;
};

createScene(30, 25, .95);

var startTime = Date.now();
var lastTime = Date.now();
var cameraAngle = -Math.PI/1.5;

var tick = function(){

    var dt = Date.now() - lastTime;

    var rotateCameraBy = (2 * Math.PI)/(200000/dt);
    cameraAngle += rotateCameraBy;

    lastTime = Date.now();

    camera.position.x = cameraDistance * Math.cos(cameraAngle);
    camera.position.y = Math.sin(cameraAngle)* 10;
    camera.position.z = cameraDistance * Math.sin(cameraAngle);
    camera.lookAt( scene.position );

    controls.update();

    renderer.render( scene, camera );

    var nextTiles = [];

    currentTiles.forEach(function(item){
        item.neighbors.forEach(function(neighbor){
            if(!seenTiles[neighbor.toString()]){
                neighbor.mesh.material.opacity = 1;
                nextTiles.push(neighbor);
                seenTiles[neighbor] = 1;
            }
        });
    });

    currentTiles = nextTiles;

    requestAnimationFrame(tick);

}

function onWindowResize(){
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
    controls.update();

}

function clamp(val, min, max){
    return Math.min(Math.max(min, val), max);
}

$('.generateButton').click(function(){

    var radius = $('#radius').val();
    var subdivisions = $('#subdivisions').val();
    var tileSize = $('#tileSize').val();

    if ($.isNumeric(radius) && $.isNumeric(subdivisions) && $.isNumeric(tileSize)){
        $('#generateError').hide();
        radius = parseInt(clamp(radius, .1, 10000));
        subdivisions = parseInt(clamp(subdivisions, 1, 100));
        tileSize = parseFloat(clamp(tileSize, 0.0001, 1))

        $('#radius').val(radius);
        $('#subdivisions').val(subdivisions);
        $('#tileSize').val(tileSize);

        createScene(radius, subdivisions, tileSize);

        if($(this).prop('id') === 'generateObj'){
            var blob = new Blob([hexasphere.toObj()], {type: "text/plain;charset=utf-8"});
            saveAs(blob, 'hexasphere.obj')
        } else if($(this).prop('id') === 'generateJson'){
            var blob = new Blob([hexasphere.toJson()], {type: "application/json;charset=utf-8"});
            saveAs(blob, 'hexasphere.json')
        }
    } else {
        $('#generateError').show();
    }


});

window.addEventListener( 'resize', onWindowResize, false );

$("#container").append(renderer.domElement);
    requestAnimationFrame(tick);
    window.scene = scene;
    window.createScene = createScene;

});



		</script>
	</body>
</html>
