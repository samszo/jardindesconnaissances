<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>Navigateur Rameau</title>
		<script type="text/javascript" src="../js/jquery.min.js"></script>
		<script type='text/javascript' src="../js/d3.js"></script>
		<script type='text/javascript' src="../js/sankey.js"></script>
	    <script type="text/javascript" src="../js/w2ui.js"></script>
		
		<link rel="stylesheet" type="text/css" href="../css/w2ui-dark.css" />
		<style>
		
		body {
		  background-color: white;
		  position: relative;
		}
		
		svg {
		  font: 10px sans-serif;
		  shape-rendering: crispEdges;
		}
		
		rect {
		  fill: #ddd;
		}
		
		.axis path,
		.axis line {
		  fill: none;
		  stroke: #fff;
		}
		
		.node rect {
		  cursor: move;
		  fill-opacity: .9;
		  shape-rendering: crispEdges;
		}
		
		.node text {
		  pointer-events: none;
		  text-shadow: 0 1px 0 #fff;
		}
		
		.link {
		  fill: none;
		  stroke: #000;
		  stroke-opacity: .2;
		}
		
		.link:hover {
		  stroke-opacity: .5;
		}
		</style>
	</head>
	<body>
		<p id="chart" />

<script>

w2popup.open({
    width: 300,
    height: 100,
    modal: true,
    title: 'Chargement en cours...',
    body: '<div class="w2ui-centered">Veuillez patienter pendant le chargement des données.</div>',
});

//calcule la taille suivant la dimension de l'écran
var margin = {top: 10, right: 10, bottom: 10, left: 10},
    width = window.innerWidth - margin.left - margin.right,
    height = window.innerHeight - margin.top - margin.bottom;
var w, h;
var fontSize = <?php echo $this->fontSize;?>;
var formatNumber = d3.format(",.0f"),
    format = function(d) { return formatNumber(d) + " TWh"; },
    color = d3.scale.category20();

var svg,sankey,path;

function zoom() {
	  svg.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
	}
function zoomEnd() {
	  console.log(d3.event);
	}

window.onresize = resize;

function resize(){
	width = window.innerWidth - margin.left - margin.right,
    height = window.innerHeight - margin.top - margin.bottom;
	d3.select("svg").transition().duration(2000)
	    .attr("width", width)
	    .attr("height", height)
		.attr("viewBox","0 0 "+w+" "+h);	
    }


d3.json("../flux/databnf?obj=rameau&idBNF=<?php echo $this->idBNF;?>&nivMax=<?php echo $this->nivMax;?>", function(stats) {

	w = width*3;// * stats.nodes.length / 2;
	h = height*3;// * stats.nodes.length / 2;
	svg = d3.select("#chart").append("svg")
	    .attr("width", w)
	    .attr("height", h)
	  .append("g")
	    .call(d3.behavior.zoom().scaleExtent([-10, 10])
	    	    .on("zoom", zoom)
	    	    .on("zoomend",zoomEnd)
	    	    )
	  .append("g");

	svg.append("rect")
	    .attr("class", "overlay")
	    .attr("width", w)
	    .attr("height", h);	

	sankey = d3.sankey()
		.nodeWidth(15)
		.nodePadding(10)
		.size([w, h])
      .nodes(stats.nodes)
      .links(stats.links)
      .layout(32);

	path = sankey.link();
  	
  	var link = svg.append("g").selectAll(".link")
      .data(stats.links)
    .enter().append("path")
      .attr("class", "link")
      .attr("d", path)
      .style("stroke-width", function(d) { 
          return Math.max(1, d.dy); 
          })
      .sort(function(a, b) { 
          return b.dy - a.dy; 
          });

  link.append("title")
      .text(function(d) { 
          return d.source.name + " → " + d.target.name; 
          });

  var node = svg.append("g").selectAll(".node")
      .data(stats.nodes)
    .enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
    .call(d3.behavior.drag()
      .origin(function(d) { return d; })
      .on("dragstart", function() { this.parentNode.appendChild(this); })
      .on("drag", dragmove))
      .on("click", function(d) {
    	  			window.location.replace(window.location.pathname+"?idBNF="+d.recid);
    	  			if(window.parent.setSelectTag){
    	  				window.parent.setSelectTag({"label":d.name,"value":d.uri,"parent":window.parent.idTagRameau});
    	  			}        	  			
          });

  node.append("rect")
      .attr("height", function(d) { return d.dy; })
      .attr("width", sankey.nodeWidth())
      .style("fill", function(d) { return d.color = color(d.name.replace(/ .*/, "")); })
      .style("stroke", function(d) { return d3.rgb(d.color).darker(2); })
    .append("title")
      .text(function(d) { return d.name + " : "+d.uri; });

  node.append("text")
      .attr("x", -6)
      .attr("y", function(d) { return d.dy / 2; })
      .attr("dy", ".35em")
      .attr("text-anchor", "end")
      .attr("transform", null)
      .text(function(d) { return d.name; })
      .style("fill", function(d) { 
          return d.type == "sujet" ? "red" : "black"; 
          })
      .style("font-size", function(d) { 
        	  //return Math.min(10 * sankey.nodeWidth(), (10 * sankey.nodeWidth() - 8) / this.getComputedTextLength() * 24) + "px"; 
          return d.type == "sujet" ? fontSize*2 : fontSize; 
          })
    .filter(function(d) { return d.x < w / 2; })
      .attr("x", 6 + sankey.nodeWidth())
      .attr("text-anchor", "start");

	//met le graphique au format de l'écran
	d3.select("svg").transition().duration(2000)
	    .attr("width", width)
	    .attr("height", height)
		.attr("viewBox","0 0 "+w+" "+h);	

	w2popup.close();
	  
  function dragmove(d) {
    d3.select(this).attr("transform", "translate(" + d.x + "," + (d.y = Math.max(0, Math.min(h - d.dy, d3.event.y))) + ")");
    sankey.relayout();
    link.attr("d", path);
  }
});

</script>
</body>
</html>
