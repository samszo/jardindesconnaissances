<?php
// Example.
// Create a test book for download.
// ePub uses XHTML 1.1, preferably strict.
// This is the minimalistic version.

// This is for the example, this is the XHTML 1.1 header
$content_start =
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
. "<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:epub=\"http://www.idpf.org/2007/ops\">\n"
. "<head>"
. "<meta http-equiv=\"Default-Style\" content=\"text/html; charset=utf-8\" />\n"
. "<link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\" />\n"
. "<title>".$this->arrBook["titre"]."</title>\n"
. "</head>\n"
. "<body>\n";

$bookEnd = "</body>\n</html>\n";

// setting timezone for time functions used for logging to work properly
date_default_timezone_set('Europe/Berlin');

include_once("EPub.php");

$book = new EPub(EPub::BOOK_VERSION_EPUB3, "fr", EPub::DIRECTION_LEFT_TO_RIGHT); // no argumetns gives us the default ePub 2, lang=en and dir="ltr"

// Title and Identifier are mandatory!
$book->setTitle($this->arrBook["titre"]);
$book->setIdentifier($this->Identifier, EPub::IDENTIFIER_URI); // Could also be the ISBN number, prefered for published books, or a UUID.
$book->setLanguage($this->Langue); // Not needed, but included for the example, Language is mandatory, but EPub defaults to "en". Use RFC3066 Language codes, such as "en", "da", "fr" etc.
$book->setDescription($this->arrBook["descriptif"]);
$book->setAuthor($this->Auteur, $this->AuteurKey);
$book->setPublisher($this->Editeur, $this->EditeurUrl);
$book->setDate(time()); // Strictly not needed as the book date defaults to time().
$book->setRights($this->Licence); // As this is generated, this _could_ contain the name or licence information of the user who purchased the book, if needed. If this is used that way, the identifier must also be made unique for the book.
//$book->setSourceURL("http://JohnJaneDoePublications.com/books/TestBookSimple.html");
//$book->setSourceURL($this->SourceURL);

// A book need styling, in this case we use static text, but it could have been a file.
$cssData = "body {\n  margin-left: .5em;\n  margin-right: .5em;\n  text-align: justify;\n}\n\np {\n  font-family: serif;\n  font-size: 10pt;\n  text-align: justify;\n  text-indent: 1em;\n  margin-top: 0px;\n  margin-bottom: 1ex;\n}\n\nh1, h2 {\n  font-family: sans-serif;\n  font-style: italic;\n  text-align: center;\n  background-color: #6b879c;\n  color: white;\n  width: 100%;\n}\n\nh1 {\n    margin-bottom: 2px;\n}\n\nh2 {\n    margin-top: -2px;\n    margin-bottom: 2px;\n}\n";
$book->addCSSFile("styles.css", "css1", $cssData);

// Add cover page
$cover = $content_start . "<h1>".$this->arrBook["titre"]."</h1>\n<h2>Par: ".$this->Auteur."</h2>\n" . $bookEnd;
$book->addChapter("Notices", "Cover.html", $cover);

//crÃ©ation des chapitres
$i = 1;
foreach ($this->arrChap as $chap) {
	$chapter = $content_start.$chap["html"].$bookEnd;
	$book->addChapter("Chapitre ".$i.": ".$chap["titre"], "Chapter".$i.".html", $chapter, true, EPub::EXTERNAL_REF_ADD);
	$i ++;
}

$book->finalize(); // Finalize the book, and build the archive.

// Send the book to the client. ".epub" will be appended if missing.
$zipData = $book->sendBook($this->arrBook["titre"]);

// After this point your script should call exit. If anything is written to the output,
// it'll be appended to the end of the book, causing the epub file to become corrupt.