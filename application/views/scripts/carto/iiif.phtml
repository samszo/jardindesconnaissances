<!DOCTYPE html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

    <link rel="stylesheet" href="../css/leaflet/leaflet.css" />
    <link rel="stylesheet" href="../css/leaflet/leaflet.label.css" />
    <link rel="stylesheet" href="../css/w2ui-1.5.rc1.min.css" />

    <script src="../js/jquery.min.js"></script>
    
    <script src="../js/w2ui-1.5.rc1.min.js"></script>
        
    <script src="../js/leaflet/leaflet.js" ></script>
        
    <script src="../js/leaflet/leaflet-iiif.js"></script>
    <script src="../js/leaflet/leaflet.label.js"></script>
    <script src="../js/leaflet/leaflet.ajax.min.js"></script>    

    
    <!-- leaflet draw -->
    <link rel="stylesheet" href="../js/leaflet/draw/leaflet.draw.css"/>

    <script src="../js/leaflet/draw/Leaflet.draw.js"></script>
    <script src="../js/leaflet/draw/Leaflet.Draw.Event.js"></script>

    <script src="../js/leaflet/draw/edit/handler/Edit.Poly.js"></script>
    <script src="../js/leaflet/draw/edit/handler/Edit.SimpleShape.js"></script>
    <script src="../js/leaflet/draw/edit/handler/Edit.Rectangle.js"></script>
    <script src="../js/leaflet/draw/edit/handler/Edit.Marker.js"></script>
  	<script src="../js/leaflet/draw/edit/handler/Edit.CircleMarker.js"></script>
  	<script src="../js/leaflet/draw/edit/handler/Edit.Circle.js"></script>

    <script src="../js/leaflet/draw/draw/handler/Draw.Feature.js"></script>
    <script src="../js/leaflet/draw/draw/handler/Draw.Polyline.js"></script>
    <script src="../js/leaflet/draw/draw/handler/Draw.Polygon.js"></script>
    <script src="../js/leaflet/draw/draw/handler/Draw.SimpleShape.js"></script>
    <script src="../js/leaflet/draw/draw/handler/Draw.Rectangle.js"></script>
    <script src="../js/leaflet/draw/draw/handler/Draw.Circle.js"></script>
    <script src="../js/leaflet/draw/draw/handler/Draw.Marker.js"></script>
    <script src="../js/leaflet/draw/draw/handler/Draw.CircleMarker.js"></script>

    <script src="../js/leaflet/draw/ext/TouchEvents.js"></script>
    <script src="../js/leaflet/draw/ext/LatLngUtil.js"></script>
    <script src="../js/leaflet/draw/ext/GeometryUtil.js"></script>
    <script src="../js/leaflet/draw/ext/LineUtil.Intersect.js"></script>
    <script src="../js/leaflet/draw/ext/Polyline.Intersect.js"></script>
    <script src="../js/leaflet/draw/ext/Polygon.Intersect.js"></script>

    <script src="../js/leaflet/draw/Control.Draw.js"></script>
    <script src="../js/leaflet/draw/Tooltip.js"></script>
    <script src="../js/leaflet/draw/Toolbar.js"></script>

    <script src="../js/leaflet/draw/draw/DrawToolbar.js"></script>
    <script src="../js/leaflet/draw/edit/EditToolbar.js"></script>
    <script src="../js/leaflet/draw/edit/handler/EditToolbar.Edit.js"></script>
    <script src="../js/leaflet/draw/edit/handler/EditToolbar.Delete.js"></script>    

    <style type="text/css">
    html, body, #map{
	  height: 100%;
	  margin: 0;
	}
	#export, #import, #save {
            position: absolute;
            top:300px;
            left:10px;
            z-index:100;
            background:white;
            color:black;
            padding:6px;
            border-radius:4px;
            font-family: 'Helvetica Neue';
            cursor: pointer;
            font-size:12px;
            text-decoration:none;
            visibility: hidden;
        }
        #import {
            visibility: hidden;
            top:340px;
        }	
        #export {
            visibility: hidden;
            top:380px;
        }	
	</style>
  </head>
  <body>
    <div id="map">
    </div>
    <a href='#' id='export'>Exporter</a>
    <a href='#' id='import'>Importer</a>
    <a href='#' id='save'>Enregistrer</a>
    <script type="text/javascript">

	var prefUrl = "", arrLayer=[], idBase = '<?php echo $this->idBase;?>', idUti = '<?php echo $this->idUti;?>';
    
    var map, dataMap={}, popupContent = '<div id="form" style="width: 600px;"></div>'
        , popupOptions = {keepInView: true, closeButton: true,minWidth: 600}
    		,clJDC, overlayMaps={};

    map = L.map('map', {
      center: [0, 0],
      crs: L.CRS.Simple,
      zoom: 0
    });
    var baseLayer;
    
	// Initialise the FeatureGroup to store editable layers
	var drawnItems = new L.FeatureGroup();
	map.addLayer(drawnItems);

	// Initialise the draw control and pass it the FeatureGroup of editable layers
	var drawControl = new L.Control.Draw({
        draw: {
            circle: false
            , circlemarker:false
        },
	  edit: {
	    featureGroup: drawnItems
	  }
	});

	
	map.addControl(drawControl);
	

    /*GESTION DES COUCHES IIIF*/
    var urlJson = '<?php echo $this->manifest; ?>';
    //var urlJson = 'http://dms-data.stanford.edu/data/manifests/BnF/jr903ng8662/manifest.json';
    //var urlInfoJson = "http://gallica.bnf.fr/iiif/ark:/12148/btv1b52503224r/f1/info.json";   
    //var urlInfoJson = 'http://gapai.univ-paris8.fr/DesignEdition/os/iiif-img/33/info.json';
   	//var urlInfoJson = "http://gapai.univ-paris8.fr/ValArNum/omk/iiif-img/2/info.json";
    //var urlInfoJson = "http://localhost/ValArNum/omk/iiif-img/1567/info.json";
    $.getJSON(urlJson, function(data) {
    
		data.metadata.forEach(function(d){
			dataMap[d.label] = d.value;
		});
        var page = data.sequences[0].canvases[0];
        console.log(page.images[0].resource.service['@id'] + '/info.json');
        baseLayer = L.tileLayer.iiif(
        		//urlInfoJson
        		page.images[0].resource.service['@id'] + '/info.json'
    		).addTo(map);
    
	    	//chargement des layers de la base
        chargeLayer();		
            
    });


	map.on(L.Draw.Event.CREATED, function (e) {

		var type = e.layerType
	  	var layer = e.layer;
		var coords;
		if(type=="marker" || type=="circle" ) coords = e.layer._latlng;
		else if(type=="rectangle" || type=="polygon" ) coords = e.layer._latlngs[0][0];
		else coords = e.layer._latlngs[0];
		  	
    	  	// enregistre le dessin dans un groupe qui pourra être enregistré
		drawnItems.addLayer(layer);
        
        layer.bindPopup(popupContent,popupOptions);
        layer.on('popupopen', function(e) { 
			console.log(e.layer)
			setForm({});        
			});
		layer.openPopup();	        
	});

	/*pour détruire le formulaire à la fermeture de la popup
    map.on('popupclose', function(e) {
	    	w2ui['form'].destroy();
    });	
	*/
	//pour charger le formulaire
	function setForm(data){
        $('#form').w2form({ 
            name   : 'form',
            header : "Commentez l'image",
            record : data,
            fields : [
                { field: 'titre', type: 'text', required: true, html: {caption: 'Titre', attr: 'style="width: 300px"' } },
                { field: 'commentaires',   type: 'textarea', html: { caption: 'Comments', attr: 'style="width: 300px; height: 90px"' } }
            ],
            actions: {
                'Supprimer': function (event) {
                },
                'Enregistrer': function (event) {
                    //valide le formulaire
            	        var errors = this.validate();
            	        if (errors.length > 0) return;

            	        //récupère les données du formulaire
            	        var dataForm = this.record;
            	        var changes = this.getChanges();
            	        var original = this.original;

                     //enregistre ou met à jour les données
                	    	var dataLayer, nbDrawItems = drawnItems.getLayers().length;
					if(nbDrawItems){
						/**Exporter les layers dans un json
						merci à https://bl.ocks.org/danswick/d30c44b081be31aea483	**/
						dataLayer = drawnItems.toGeoJSON();//le nouveau layer dessiné
						dataLayer.features[0].properties = dataForm;
						//enregistre le layer dans la base
						saveLayer(dataLayer);
					}else{
                     	dataLayer = overlayMaps[original.titre].toGeoJSON();
                     	dataLayer.features[0].properties = dataForm;
	                    //met à jour le layer dans la base
                        updateLayer(dataLayer, original.titre);
					}                	    	
                },
                /*
                'Clear': function (event) {
                    console.log('clear', event);
                    this.clear();
                }
                */
            }
        });
        //on ne peut changer le titre pour éviter des problèmes avec le nom du layer dans le control
        if(data.doc_id)$(w2ui.form.get('titre').el).prop('readonly', true);            		
	}


	//récupère les références JDC
	function getDataLayer(p){
		//vérifie si on prend la référence JDC
		if(dataMap['Is Referenced By']){
			var arr = dataMap['Is Referenced By'].split('-');
			p.idBase = arr[0];
			p.table = arr[1];
			p.col = arr[2];
			p.val = arr[3];
		}
		if(!p.idBase)p.idBase = idBase;

		//récupère les données du formulaire
		if(p.features && p.features[0].properties){
			p.titre = p.features[0].properties.titre;
			if(p.features[0].properties.doc_id)p.doc_id = p.features[0].properties.doc_id;
		}else{
			var d = new Date();
			p.titre = "Layer : "+d.toString();
		}
		return p;
	}   
			
	//enregistre le layer dans la base
	function saveLayer(p){
		//récupère les référence de la carte
		p = getDataLayer(p);
		//envoie la requête au serveur
		$.post(prefUrl+"savelayer", p,
				 function(data){
			 		if(data.erreur){
			 			console.log("ERREUR:");				 		
			 			console.log(data.erreur);
			 		}else{
			 			console.log(data);
			 			//vide le layer de dessin
			 			drawnItems.clearLayers();	                    			 						 			
			 			//ajoute un layer au control
		 				geojsonLayer = setJsonLayer(data.rs);			 					 				
			 			clJDC.addOverlay(geojsonLayer, data.rs.titre);
			 			w2alert('Les données sont enregistrées');
			 							 		
			 		}					 		
				 }, "json");
	}

	//update le layer dans la base
	function updateLayer(p, oldTitre){
		//récupère les référence de la carte
		var dt = getDataLayer(p);
		//envoie la requête au serveur
		$.post(prefUrl+"updatelayer", dt,
				 function(data){
			 		if(data.erreur){
			 			console.log("ERREUR:");				 		
			 			console.log(data.erreur);
			 		}else{
			 			console.log(data);
/*Pour éviter ce traitement on ne peut pas changer le nom du layer
						//change le nom du layer
						clJDC._layers[0].name = data.rs.titre
			 			//supprime le layer du tableau
			 			overlayMaps[oldTitre].closePopup();
//			 			clJDC.removeLayer(overlayMaps[oldTitre]);
//			 			map.removeLayer(overlayMaps[oldTitre]);
			 			delete overlayMaps[oldTitre];
			 			//ajoute un layer au control
		 				geojsonLayer = setJsonLayer(data.rs);
		 				overlayMaps[data.rs.titre]=geojsonLayer;			 			
//			 			clJDC.addOverlay(geojsonLayer, data.rs.titre);
//			 			geojsonLayer.openPopup();
*/
			 			w2alert('Les données sont enregistrées');				 		
			 		}					 		
				 }, "json");
	}

	
	//charge les layers de la base
	function chargeLayer(){
		//vérifie si on prend la référence JDC
		if(dataMap['Is Referenced By']){
			var p = {};
			var arr = dataMap['Is Referenced By'].split('-');
			p.idBase = arr[0];
			p.table = arr[1];
			p.col = arr[2];
			p.val = arr[3];

			$.get(prefUrl+"getlayer", p,
					 function(data){
				 		if(data.erreur){
				 			console.log("ERREUR:");				 		
				 			console.log(data.erreur);
				 		}else{
				 			//console.log(data);				 			
			 				arrLayer = data;
				 			arrLayer.forEach(function(d, i){

				 				geojsonLayer = setJsonLayer(d);
					 			overlayMaps[d.titre] = geojsonLayer;
					 			
				 			});
				 			clJDC = L.control.layers(null,overlayMaps,{collapsed:false}).addTo(map);
				 			
				 		}					 		
					 }, "json");
			
		}
	}

	function setJsonLayer(d){
		var geojson = JSON.parse(d.note);
		var geojsonLayer = L.geoJSON(geojson,{
	 			// add a popup content to the marker
		        onEachFeature: function (feature, layer) {
		            if (feature.properties && feature.properties.titre) {
		                layer.bindPopup(popupContent,popupOptions);
		            }
		        }});				 								 								 								 								 			
		
		geojsonLayer.on('popupopen', function(e) { 
			console.log(e.layer)
			//pour pouvoir modifier les layer
			//il faut es supprimer et le recréer ou le faire un par un
			//drawnItems.addLayer(e.layer);
			//pour remplir le formulaire		    										
			setForm(e.layer.feature.properties);        
			});
		//pour ouvrir la popup automatiquement
		geojsonLayer.on("add", function (event) {
			 event.target.getLayers()[0].openPopup();
			})				
	    	//pour détruire le formulaire à la fermeture de la popup
        geojsonLayer.on('popupclose', function(e) {
	    	    	w2ui['form'].destroy();
        });	
			
				 			
		return geojsonLayer;
	}
    
    </script>
  </body>
</html>