<!DOCTYPE html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

    <link rel="stylesheet" href="../css/leaflet/leaflet.css" />
    <link rel="stylesheet" href="../css/leaflet/leaflet.label.css" />
    <link rel="stylesheet" href="../css//w2ui.css" />

    <script src="../js/jquery.min.js"></script>
    
    <script src="../js/w2ui.min.js"></script>
        
    <script src="../js/leaflet/leaflet.js" ></script>
        
    <script src="../js/leaflet/leaflet-iiif.js"></script>
    <script src="../js/leaflet/leaflet.label.js"></script>
    <script src="../js/leaflet/leaflet.ajax.min.js"></script>    

    
    <!-- leaflet draw -->
    <link rel="stylesheet" href="../js/leaflet/draw/leaflet.draw.css"/>

    <script src="../js/leaflet/draw/Leaflet.draw.js"></script>
    <script src="../js/leaflet/draw/Leaflet.Draw.Event.js"></script>

    <script src="../js/leaflet/draw/edit/handler/Edit.Poly.js"></script>
    <script src="../js/leaflet/draw/edit/handler/Edit.SimpleShape.js"></script>
    <script src="../js/leaflet/draw/edit/handler/Edit.Rectangle.js"></script>
    <script src="../js/leaflet/draw/edit/handler/Edit.Marker.js"></script>
  	<script src="../js/leaflet/draw/edit/handler/Edit.CircleMarker.js"></script>
  	<script src="../js/leaflet/draw/edit/handler/Edit.Circle.js"></script>

    <script src="../js/leaflet/draw/draw/handler/Draw.Feature.js"></script>
    <script src="../js/leaflet/draw/draw/handler/Draw.Polyline.js"></script>
    <script src="../js/leaflet/draw/draw/handler/Draw.Polygon.js"></script>
    <script src="../js/leaflet/draw/draw/handler/Draw.SimpleShape.js"></script>
    <script src="../js/leaflet/draw/draw/handler/Draw.Rectangle.js"></script>
    <script src="../js/leaflet/draw/draw/handler/Draw.Circle.js"></script>
    <script src="../js/leaflet/draw/draw/handler/Draw.Marker.js"></script>
    <script src="../js/leaflet/draw/draw/handler/Draw.CircleMarker.js"></script>

    <script src="../js/leaflet/draw/ext/TouchEvents.js"></script>
    <script src="../js/leaflet/draw/ext/LatLngUtil.js"></script>
    <script src="../js/leaflet/draw/ext/GeometryUtil.js"></script>
    <script src="../js/leaflet/draw/ext/LineUtil.Intersect.js"></script>
    <script src="../js/leaflet/draw/ext/Polyline.Intersect.js"></script>
    <script src="../js/leaflet/draw/ext/Polygon.Intersect.js"></script>

    <script src="../js/leaflet/draw/Control.Draw.js"></script>
    <script src="../js/leaflet/draw/Tooltip.js"></script>
    <script src="../js/leaflet/draw/Toolbar.js"></script>

    <script src="../js/leaflet/draw/draw/DrawToolbar.js"></script>
    <script src="../js/leaflet/draw/edit/EditToolbar.js"></script>
    <script src="../js/leaflet/draw/edit/handler/EditToolbar.Edit.js"></script>
    <script src="../js/leaflet/draw/edit/handler/EditToolbar.Delete.js"></script>    

    <style type="text/css">
    html, body, #map{
	  height: 100%;
	  margin: 0;
	}
	#export, #import, #save {
            position: absolute;
            top:300px;
            left:10px;
            z-index:100;
            background:white;
            color:black;
            padding:6px;
            border-radius:4px;
            font-family: 'Helvetica Neue';
            cursor: pointer;
            font-size:12px;
            text-decoration:none;
        }
        #import {
            visibility: hidden;
            top:340px;
        }	
        #export {
            visibility: hidden;
            top:380px;
        }	
	</style>
  </head>
  <body>
    <div id="map">
    </div>
    <a href='#' id='export'>Exporter</a>
    <a href='#' id='import'>Importer</a>
    <a href='#' id='save'>Enregistrer</a>
    <script type="text/javascript">

	var prefUrl = "", arrLayer=[];
	var idBase = '<?php echo $this->idBase;?>';
	var idUti = '<?php echo $this->idUti;?>';
    
    var map, dataMap={};

    map = L.map('map', {
      center: [0, 0],
      crs: L.CRS.Simple,
      zoom: 0
    });
    var baseLayer;
    
	// Initialise the FeatureGroup to store editable layers
	var drawnItems = new L.FeatureGroup();
	map.addLayer(drawnItems);

	// Initialise the draw control and pass it the FeatureGroup of editable layers
	var drawControl = new L.Control.Draw({
        draw: {
            circle: false
            , circlemarker:false
        },
	  edit: {
	    featureGroup: drawnItems
	  }
	});

	
	map.addControl(drawControl);
	

    
    var urlJson = '<?php echo $this->manifest; ?>';
    //var urlJson = 'http://dms-data.stanford.edu/data/manifests/BnF/jr903ng8662/manifest.json';
    //var urlInfoJson = "http://gallica.bnf.fr/iiif/ark:/12148/btv1b52503224r/f1/info.json";   
    //var urlInfoJson = 'http://gapai.univ-paris8.fr/DesignEdition/os/iiif-img/33/info.json';
   	//var urlInfoJson = "http://gapai.univ-paris8.fr/ValArNum/omk/iiif-img/2/info.json";
    //var urlInfoJson = "http://localhost/ValArNum/omk/iiif-img/1567/info.json";
    $.getJSON(urlJson, function(data) {
    
		data.metadata.forEach(function(d){
			dataMap[d.label] = d.value;
		});
        var page = data.sequences[0].canvases[0];
        console.log(page.images[0].resource.service['@id'] + '/info.json');
        baseLayer = L.tileLayer.iiif(
        		//urlInfoJson
        		page.images[0].resource.service['@id'] + '/info.json'
    		).addTo(map);
    
          /*
          $.getJSON(page.otherContent[0]['@id'], function(annoData) {
            $.each(annoData.resources, function(i, value) {
              var b = /xywh=(.*)/.exec(value.on)[1].split(',');
              var minPoint = L.point(b[0], b[1]);
              var maxPoint = L.point(parseInt(b[0]) + parseInt(b[2]), parseInt(b[1]) + parseInt(b[3]));
              var min = map.unproject(minPoint, 3);
              var max = map.unproject(maxPoint, 3);
              L.rectangle(L.latLngBounds(min, max)).bindLabel(value.resource.chars).addTo(map);
            });
          });
          */        
	    	//chargement des layers de la base
        chargeLayer();		
            
    });


	map.on(L.Draw.Event.CREATED, function (e) {

		var type = e.layerType
	  	var layer = e.layer;
		var coords;
		if(type=="marker" || type=="circle" ) coords = e.layer._latlng;
		else if(type=="rectangle" || type=="polygon" ) coords = e.layer._latlngs[0][0];
		else coords = e.layer._latlngs[0];
		  	
    	  	// enregistre le dessin dans un groupe qui pourra être enregistré
		drawnItems.addLayer(layer);

	    //création du formulaire de la popup
        popupContent = '<div id="form" style="width: 600px;"></div>';
        
        layer.bindPopup(popupContent,{
	      keepInView: true,
	      closeButton: false,
	      minWidth: 600
	      }).openPopup();        
	});

	//pour charger le contenu de la popup
    map.on('popupopen', function() {
        $('#form').w2form({ 
            name   : 'form',
            header : "Commentez l'image",
            fields : [
                { field: 'titre', type: 'text', required: true, html: { caption: 'Titre', attr: 'style="width: 300px"' } },
                { field: 'commentaires',   type: 'textarea', html: { caption: 'Comments', attr: 'style="width: 300px; height: 90px"' } }
            ],
            actions: {
                'Save': function (event) {
                    console.log('save', event);
                    this.save();
                },
                'Clear': function (event) {
                    console.log('clear', event);
                    this.clear();
                }
            }
        });            
    });	  	

	
	/**Exporter les layers dans un json
	merci à https://bl.ocks.org/danswick/d30c44b081be31aea483
	**/
	document.getElementById('export').onclick = function(e) {
        // Extract GeoJson from featureGroup
        var data = drawnItems.toGeoJSON();

        // Stringify the GeoJson
        var convertedData = 'text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(data));

        // Create export
        document.getElementById('export').setAttribute('href', 'data:' + convertedData);
        document.getElementById('export').setAttribute('download','data.geojson');
    }	

	/**Enregistre les layers dans un json puis dans la base de données
	**/
	document.getElementById('save').onclick = function(e) {
        // Extract GeoJson from featureGroup
        var data = drawnItems.toGeoJSON();

        saveLayer(data);

    }	

	/**
	merci à 
	**/
	document.getElementById('import').onclick = function(e) {
		  var geojsonLayer = new L.GeoJSON.AJAX("../data/data1.geojson");

		  //enregistre un label
		  geojsonLayer.bindLabel('Staff Mass Storage GA', { noHide: true });

	  	/* create popup contents
    		var customPopup = "Mozilla Toronto Offices<br/><img src='http://joshuafrazier.info/images/maptime.gif' alt='maptime logo gif' width='350px'/>";
	    // specify popup options 
	    var customOptions =
	        {
	        'maxWidth': '500',
	        'className' : 'custom'
	        }	  
	  	layer.bindPopup(customPopup,customOptions);
		*/

		
		//geojsonLayer.addTo(map);
		drawnItems.addLayer(geojsonLayer);	
	}
		
	//enregistre le layer dans la base
	function saveLayer(p){
		var d = new Date();
		//vérifie si on prend la référence JDC
		if(dataMap['Is Referenced By']){
			var arr = dataMap['Is Referenced By'].split('-');
			p.idBase = arr[0];
			p.table = arr[1];
			p.col = arr[2];
			p.val = arr[3];
		}
		if(!p.idBase)p.idBase = idBase;
		p.titre = "Layer : "+d.toString();
		$.post(prefUrl+"savelayer", p,
				 function(data){
			 		if(data.erreur){
			 			console.log("ERREUR:");				 		
			 			console.log(data.erreur);
			 		}else{
			 			console.log(data);				 		
			 		}					 		
				 }, "json");
	}

	//charge les layers de la base
	function chargeLayer(){
		//vérifie si on prend la référence JDC
		if(dataMap['Is Referenced By']){
			var p = {};
			var arr = dataMap['Is Referenced By'].split('-');
			p.idBase = arr[0];
			p.table = arr[1];
			p.col = arr[2];
			p.val = arr[3];

			$.get(prefUrl+"getlayer", p,
					 function(data){
				 		if(data.erreur){
				 			console.log("ERREUR:");				 		
				 			console.log(data.erreur);
				 		}else{
				 			console.log(data);				 			
			 				arrLayer = data;
			 				var overlayMaps = {};
				 			arrLayer.forEach(function(d, i){
					 			var geojson = JSON.parse(d.note);
					 			var geojsonLayer = L.geoJSON(geojson, {onEachFeature: onEachFeature});				 								 								 								 								 			
					 			//L.geoJSON(geojsonLayer).addTo(map);				 								 			
					 			//drawnItems.addLayer(geojsonLayer);						 			
					 			overlayMaps[d.titre] = geojsonLayer;
				 			});
				 			L.control.layers(null,overlayMaps,{collapsed:false}).addTo(map);
				 			
				 		}					 		
					 }, "json");
			
		}
	}

	function onEachFeature(feature, layer) {
	    //bind click
	    layer.on('click', function (e) {
	      // e = event
	      console.log(e);
	      // You can make your ajax call declaration here
	      //$.ajax(... 
	    });

	}
	
	function editDoc(){
		var p = getDocParams();
		p.idDoc = arrGraphs[lstGraph.selectedIndex].doc_id;
		$.post(prefUrl+"flux/sauvedoc", p,
				 function(data){
			 		if(data.erreur){
			 			showMessage(data.erreur);
			 		}else{
			 			getDocs();							 		
						showMessage("Graph enregistré.");
				  		diagSauvDoc.close();						 		
			 		}					 		
				 }, "json");
	}	
    
    </script>
  </body>
</html>