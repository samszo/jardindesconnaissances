<!DOCTYPE html>
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html;charset=utf-8"/ >
		<title><?php echo $this->titre;?></title>

		<!-- D3.js -->
		<script src="https://d3js.org/d3.v4.min.js"></script>

		<!-- w2ui.js -->
		<script type="text/javascript" src="../js/jquery.min.js" charset="utf-8"></script>
	    <script type="text/javascript" src="../js/w2ui.js" charset="utf-8"></script>
	    <link rel="stylesheet" type="text/css" href="../css/w2ui-dark.css" />
	    <link rel="stylesheet" type="text/css" href="../font/font-awesome/font-awesome.css" />
		
		
		<style>
			body {
				cursor: default;
				text-align: center;
				background-color:black;
			}
			.legend {
				font-family: 'Raleway', sans-serif;
				fill: #333333;
				font-size: 11px;
				font-weight: 300;
				text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, -1px 0 0 #fff, 0 -1px 0 #fff;
								
			}
			
			.tooltip {
				fill: white;
				text-anchor:middle;
				text-align:center;
			}
			
			.conceptG {
				fill-opacity:1;			
			}			
			.conceptD {
				fill-opacity:1;
				text-anchor:end;			
			}

			.val {
				fill:red;
				fill-opacity:1;
			}


			.arrow {
				fill-rule:evenodd;
				stroke:white;
				stroke-width:5px;		
			}

			.arrowHead {
				fill-rule:evenodd;
				stroke:black;
				stroke-width:0.3px;
				fill:white;			
			}
			text{
				fill:white;
			}
			
			.w2ui-form .w2ui-page {
			    background-color: black;
			}
			
		</style>
	
	</head>
	<body >
		<div id="formAxe"></div>

		<script>
		var fctClear, fctSave;
		
		////////////////////////////////////////////////////////////// 
		////////////////////////// Data ////////////////////////////// 
		////////////////////////////////////////////////////////////// 
		var axeData = <?php echo $this->data; ?>;
		var conceptG = '<?php echo $this->conceptG; ?>';
		var conceptD = '<?php echo $this->conceptD; ?>';
		var type = '<?php echo $this->type; ?>';
		//force le type suivant le nombre de concept
		if(conceptG && conceptD)type="plage";
	      
		//création du formulaire		
		if(w2ui['formAxe'])w2ui['formAxe'].destroy();		
		$('#formAxe').w2form({
		    name: 'formAxe',
		    header: "<?php echo $this->titre;?>",		    
		    style: 'border: 0px; background-color: transparent;',
		    formHTML: 
		        '<div class="w2ui-page page-0">'+
		        '	<div id="axeChart"></div>'+
		        '</div>'+
		        '<div class="w2ui-buttons">'+
		        '   <button class="w2ui-btn" name="reset">Reset</button>'+
		        '    <button class="w2ui-btn w2ui-btn-green" name="save">Save</button>'+
		        '</div>',
		    fields: [],
		    onRender: function(event) {		    
		        console.log(event);
		        event.onComplete = function () {
			        drawAxe();
		        }		        
		    }, 
		    record: {},
		    actions: {
		        "save": function () { 
			        if(fctSave)fctSave(); 
			    },
		        "reset": function () { 
					if(axeData.length){
						//mise à zéro des axes
						axeData.forEach(function(c){
							c.forEach(function(d){
								d.value = 0;
							});
						});
						//
						//AxeChart(".radarChart", axeData, radarChartOptions);
					}
			        if(fctClear)fctClear(); 					
			    }
		    }
		});
		//

					
		
		function drawAxe(){

			var margin = {top: 40, right: 40, bottom: 40, left: 40, inter: 10},
			width = Math.min(1024, window.innerWidth - 10) - margin.left - margin.right,
			fontSize=80, height = (fontSize*1.22), bbox, yGlobal;

			//adapte la taille suivant le nombre de concept
			if(conceptG) height += (fontSize*1.22);
			
			var dataArea = d3.range(0, 101) ;
			
			var xD = d3.scaleLinear()
			    .domain([0, 100])
			    .range([0, width]);
			var pcTOinD = d3.scaleLinear()
				.domain([0, 100])
				.range([0, 1]);

			if(conceptG) {			
				var xG = d3.scaleLinear()
				    .domain([100, 0])
				    .range([0, width]);			
				var pcTOinG = d3.scaleLinear()
					.domain([0, 100])
					.range([1, 0]);
			}
			var color = d3.interpolateMagma;
			/*
			var color = d3.scaleLinear()
				.domain([-100, 100])
				.range(["blue", "red"]);
			*/
		    
									
			var svg = d3.select("#axeChart").append("svg")
			    .attr("width", width + margin.left + margin.right)
			    .attr("height", height + margin.top + margin.bottom);
			//ajoute un fond noir    
			svg.append("rect")
			    .attr("width", width + margin.left + margin.right)
			    .attr("height", height + margin.top + margin.bottom)
			    .attr("x", 0)
			    .attr("y", 0)				
				.style("fill","black");

			/*pour vérifier le positionnement
			var rline = svg.append("g")
		    		.attr("transform",
			          "translate(" + margin.left + "," + 70 + ")");
			rline.append('line')
				.attr("class","arrow")
				.attr("x1",0)
				.attr("y1",0)
				.attr("x2",width)
				.attr("y2",0);				       
			*/

			//ajoute le concept de gauche
			yGlobal = margin.top;

			//barres pour le dégradé de couleur
			var xBarre = d3.scaleBand()
		          .range([0, width])
		          .domain(dataArea.map(function(d) { return d; }));
			
			if(conceptG) {			
				//ajoute le concept de gauche
				yGlobal += fontSize*0.5;
				var txtG = svg.append("g")
			    		.attr("transform",
				          "translate(" + margin.left + "," + (yGlobal) + ")")
					.attr("class", "conceptG")
					.append('text')
						.attr("class","txtG")
						.style("font-size",fontSize)
						.text(conceptG);

				//calcule la place de l'élément suivant
				yGlobal += fontSize*0.5;
				  
				//ajoute l'axe concept gauche
				var gAxeG = svg.append("g")
				    .attr("transform",
				          "translate(" + margin.left + "," + (yGlobal) + ")")
					.attr("class", "axisG")
					.call(d3.axisTop(xG)
				        .ticks(5)
				        .tickFormat(function(d) { return d+"%"; }));	        
				gAxeG.selectAll(".axisG")
			      .data(dataArea)
				    .enter().append("rect")
				      .attr("class", "barG")
				      .attr("x", function(d) { return xBarre(d);})
				      .attr("width", xBarre.bandwidth())
				      .style("fill",function(d) { 
					      return color(pcTOinG(d)); 
					      })
				      .attr("y", 0)
				      .attr("height", 20)
				      .on('click',selectBarre);

				//calcule la place de l'élément suivant
				yGlobal += 20;	

			}
								
			//ajoute l'axe concept droit
			var gAxeD = svg.append("g")
			    .attr("transform","translate(" + margin.left + "," + (yGlobal) + ")")
				.attr("class", "axisD");
			gAxeD.selectAll(".axisD")
		      .data(dataArea)
			    .enter().append("rect")
			      .attr("class", "barD")
			      .attr("x", function(d) { return xBarre(d);})
			      .attr("width", xBarre.bandwidth())
			      .style("fill",function(d) { 
				      return color(pcTOinD(d)); 
				      })
			      .attr("y", 0)
			      .attr("height", 20)		
				.on('click',selectBarre);
			gAxeD.append("g")
		    		.attr("transform","translate(0,20)")
				.call(d3.axisBottom(xD)
			        .ticks(5)
			        .tickFormat(function(d) { return d+"%"; }));	 			
			
			//calcule la place de l'élément suivant
			yGlobal += 0;

			//ajoute le sélecteur
			if(type=='plage'){
				var hBrush, yBrush = 0;
				if(conceptG){
					hBrush=40;
					yBrush = -20;				
				}else hBrush=20;
				var brush = d3.brushX()
				    .extent([[0, 0], [width, hBrush]])
				    .on("brush", brushed);
				var bBrush = svg.append("g")
			    		.attr("transform","translate(" + margin.left + "," + (yGlobal+yBrush) + ")")
				    .attr("class", "brush")
				    .call(brush)	;
			}

						
			//ajoute l'axe avec les flèches
			defs = svg.append("defs");
			
			if(conceptG) {			
				defs.append("marker")
						.attr("id","arrowStart")
						.attr("refX",0)
						.attr("refY",0)
						.attr("orient","auto")
						.attr("style","overflow:visible")
					.append("path")
							.attr("d", "M 0,0 5,-5 -12.5,0 5,5 0,0 z")
							.attr("transform", "matrix(0.8,0,0,0.8,10,0)")
							.attr("class","arrowHead");				
			}else{
				defs.append("marker")
					.attr("id","arrowStart")
					.attr("refX",0)
					.attr("refY",0)
					.attr("orient","auto")
					.attr("style","overflow:visible")
				.append("path")
						.attr("d", "M -2.5,-1.0 C -2.5,1.7600000 -4.7400000,4.0 -7.5,4.0 C -10.260000,4.0 -12.5,1.7600000 -12.5,-1.0 C -12.5,-3.7600000 -10.260000,-6.0 -7.5,-6.0 C -4.7400000,-6.0 -2.5,-3.7600000 -2.5,-1.0 z ")
						.attr("transform", "scale(0.8) translate(7.4, 1)")
						.attr("class","arrowHead");				
			}
			
			defs.append("marker")
					.attr("id","arrowEnd")
					.attr("refX",0)
					.attr("refY",0)
					.attr("orient","auto")
					.attr("style","overflow:visible")
				.append("path")
					.attr("d", "M 0,0 5,-5 -12.5,0 5,5 0,0 z")
					.attr("transform", "matrix(-0.8,0,0,-0.8,-10,0)")
					.attr("class","arrowHead");
			var line = svg.append("g")
		    		.attr("transform",
			          "translate(" + margin.left + "," + (yGlobal) + ")");
			line.append('line')
				.attr("class","arrow")
				.attr("marker-end","url(#arrowEnd)")
				.attr("marker-start","url(#arrowStart)")
				.attr("x1",0)
				.attr("y1",0)
				.attr("x2",width)
				.attr("y2",0);		
			
			//calcule la place de l'élément suivant
			yGlobal += 80+fontSize*0.3;

			//ajoute le concept de droite
			var txtD = svg.append("g")
		    		.attr("transform",
			          "translate(" + (width+margin.left) + "," + (yGlobal) + ")")
				.attr("class", "conceptD")
				.append("text")
					.attr("class","txtD")
					.style("font-size",fontSize)
					.text(conceptD);
		       
			//ajoute le suivi des valeurs
			if(conceptG) {
				var valG = line.append('g')
					.attr('class','valG')
					.attr("transform","translate(-100,-100)");
				valG.append('rect')
					.attr("x", -10)
			    		.attr("y", -10)
					.attr("width", 40)
			    		.attr("height", 12)
			    		.attr("fill","black");
				var valGtxt = valG.append('text')
							.attr('id','valG')
							.attr('class','val')
							.text('');
			}
			var valD = line.append('g')
				.attr('class','valD')
				.attr("transform","translate(-100,-100)");
			valD.append('rect')
				.attr("x", -10)
		    		.attr("y", -10)
				.attr("width", 40)
		    		.attr("height", 12)
		    		.attr("fill","black");
			var valDtxt = valD.append('text')
				.attr('id','valD')
				.attr('class','val')
				.text('');
			var valMarkD = line.append('g')
				.attr('class','valMarkD')
				.attr("transform","translate(-100,-100)");
			valMarkD.append('rect')
				.attr("x", 0)
		    		.attr("y", 0)
				.attr("width", xBarre.bandwidth())
		    		.attr("height", 32)
		    		.attr("fill","red");
				    
			function brushed() {
				  if (d3.event.sourceEvent.type === "brush") return;
				  var s = d3.event.selection;
				  var domain = s.map(xD.invert);
				  //console.log(rectSelect.attr("x"));
				  if(conceptG){
					  valG.attr("transform","translate(" + xBarre(Math.floor(domain[0])) + ",-30)");
					  txtG.style("fill",color(pcTOinG(domain[0])));
				  }
				  //problème d'undefined sur domain à 100 ????
				  var xLabel = width;
				  if(Math.floor(domain[1])<100)xLabel = xBarre(Math.floor(domain[1]));
				  valD.attr("transform","translate(" + xBarre(Math.floor(domain[1])) + ",36)");
				  valDtxt.text(" "+(Math.floor(domain[1]))+" %");
				  valGtxt.text(" "+Math.floor(-domain[0]+100)+" %");
				  //txtG.style("font-size",(-Math.floor(domain[0]))+"px");
				  //txtG.style("fill-opacity",-Math.floor(domain[0])/100);
				  //txtG.style("fill",color(-domain[0]));
				  txtD.style("fill",color(pcTOinD(domain[1])));
				  //console.log(domain);
			}

			function selectBarre(d,i){
				var n = d3.select(this);
				var bbox = n.node().getBBox();
				//console.log(bbox);
				if(n.attr('class')=='barD'){
					valD.attr("transform","translate("+xBarre(d)+",-10)");
					valDtxt.text(" "+Math.floor(d)+" %");					
					txtD.style("fill",color(pcTOinD(d)));
					valMarkD.attr("transform","translate("+xBarre(d)+",-6)");
				}
				
			}

		}			
		</script>
	</body>
</html>