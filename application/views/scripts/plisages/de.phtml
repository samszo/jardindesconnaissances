<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		<title>Générateur de dé</title>
		
		<link rel="stylesheet" href="../css/font-awesome.css">
    	<script type="text/javascript" src="../js/d3.v4.js"></script>

		
		<style>
			.mainBody {
			  margin: 6px;
			  position: relative;
			}			
			.foreignBody {
				background-color:black;
				margin:0px;
				width: 0px;				
			}
			.btn {
				cursor:pointer;
			    background-color:white;
			}
			.btn:hover {
			    background-color:lightgray;
			}			
			i {
			  	stroke: none;
			  	cursor: pointer;
  			}		
  			.active div {
			    background-color:green;
			}	
		</style>	
	</head>
	<body class="mainBody" >
		<div id="viz" ></div>		
		
		<script type="text/javascript">

		var ficIHM = "../svg/de.svg";
		var ficCSV = "../data/listeFontAwesome.csv";
		var arrBtn = [{id:'btnListe',fct:showListe},{id:'btnRandom',fct:setRandomIcone},{id:'btnTrash',fct:removeIcone}];
		var onDrag = false;
		var tIHM = {w:1100,h:750}, tPalette = {w:800,h:750}, tIcone = {w:60,h:60}, tFont = 1;
		var transform = d3.zoomIdentity;		
		var arrFaces=[], arrIcones, rdm, svgGlobal,svgDrag, gPalette, iconeTarget, iconeDrag;
		
		//chargement des icones
		d3.csv(ficCSV, function(error, data) {
			if (error) throw error;		
		  	arrIcones = data;
		  	var xTot=0, yTot=0;
		  	arrIcones.forEach(function(ico, i){
			  	if(xTot+tIcone.w > tPalette.w){xTot = 0;yTot += tIcone.h/2;}			  	
			  	ico.bb = {width:tIcone.w, height:tIcone.h, x:xTot, y:yTot};
			  	xTot += tIcone.w/2;
			  	ico.id = 'ico_'+i
			  	ico.type='palette';
		  	});
			rdm = d3.randomUniform(0, arrIcones.length-1);

			//création du svg global
			svgGlobal = d3.select("body")
	            //.style('width', (tIHM.w+tPalette.w)+'px')
	            //.style('height', (tIHM.h+tPalette.h)+'px')		    
				.append("svg")
	            .attr('width', '100%')
	            .attr('height', '100%');			    
			//ajoute le group de la palette
			gPalette = svgGlobal.append("g")
		  		.attr('id','gPalette')
			    .style("visibility","hidden")
			    .attr("transform", "translate(" + (tIHM.w+20) + "," + 0 + ") scale(0.8)")				    		    				    				    		    
	            .attr('width', tPalette.w+'px')
	            .attr('height', tPalette.h+'px');			    

		  	//affiche l'IHM
			d3.xml(ficIHM).mimeType("image/svg+xml").get(function(error, xml) {
			  	if (error) throw error;
			  	svgGlobal.append("g")
				    .attr("transform", "translate(" + 0 + "," + 0 + ")")			    				    	
			  		.attr('id','gPliage')
			  		.node().appendChild(xml.documentElement);
    	  		//d3.select("#viz").node().appendChild(xml.documentElement);	    	    	  	
    	  		ajoutEvent();
			});

			//affiche toutes les icones dans la palette
		    var palettes = d3.select("#gPalette").selectAll("svg")
		    	.data(arrIcones)
			    .enter().append("svg")
		    	.attr('id', function(d){
			    	return d.id;
			    	})
		    	.attr('y', function(d){
			    	return d.bb.y;
			    	})			    	
		    	.attr('x', function(d,i){
			    	return d.bb.x;
			    	})
		    	.call(d3.drag()
		            .on("start", dragstarted)
		            .on("drag", dragged)
		            .on("end", dragended));
			icones = palettes.append('foreignObject')
	            .attr('width', function(d){return d.bb.width+'px';})
	            .attr('height', function(d){return d.bb.height+'px';})
	            .append("xhtml:body")
	            	.attr("xmlns","http://www.w3.org/1999/xhtml")
		            .attr('width', function(d){return d.bb.width+'px';})
		            .attr('height', function(d){return d.bb.height+'px';})
		            .attr('class', "foreignBody")
		            .append('div')
		            	.style("line-height",function(d){return d.bb.height+'px';})
			            .attr('width', function(d){return d.bb.width+'px';})
			            .attr('height', function(d){return d.bb.height+'px';})
		            	.style("text-align","center")
						.on("mouseover", function(){
					    	if(onDrag) d3.select(this).style("background-color","red");
					    	else d3.select(this).style("background-color","orange");
						  	})
						.on("mouseout", function(){
					    	d3.select(this).style("background-color","transparent");
						  });			    
			icones.append("i")
			    .attr("class", function(d){ 
			      return "icon fa fa-"+tFont+"x " + d.icone;
			    })
			    .style("background-color", "white")
			    .style('padding','4px')
			    .style('margin','4px')
			    .on("mouseover", function(){
			      //d3.select(this).style(hoveredStyle);
			    })
			    .on("mouseout", function(){
			      //d3.select(this).style(defaultStyle);
			    })
			    .on("mousedown", function(d){
			      //d3.select(this).style(clickedStyle);
			    })
			    .on("mouseup", function(){
			      //d3.select(this).style(hoveredStyle);
			    })
		});

		
		//fonction pour le drag & drop des icones
		function dragstarted(d) {
		  //console.log(d3.event.x+','+d3.event.y+' : '+d.bb.x+','+d.bb.y);
		  //console.log(d3.mouse(svgGlobal.node()));
		  var posi = d3.mouse(svgGlobal.node());
		  d.bb.x = posi[0];
		  d.bb.y = posi[1];
		  iconeDrag = d.icone;
		  if(d.type=='face')iconeTarget=d.icone;
		  setSvgDrag(d);
		  onDrag = true;
		}
		
		function dragged(d) {
		  //console.log(d+'='+d3.event.x+','+d3.event.y+":"+d.bb.width+','+d.bb.height);
		  //d3.select(this).attr("x", d3.event.x-(d.bb.width/2)).attr("y", d3.event.y-(d.bb.height/2));
		  //svgDrag.attr("x", d3.event.x-d.bb.width-10).attr("y", d3.event.y-d.bb.height-10);
		  //svgDrag.attr("x", d3.event.x-(tIcone.w/2)).attr("y", d3.event.y-tIcone.h-10);
		  var posi = d3.mouse(svgGlobal.node());
		  svgDrag.attr("x", posi[0]-(d.bb.width/2)).attr("y", posi[1]-d.bb.height-10);
		  
		  
		}
		
		function dragended(d, i) {
		  //d3.select(this).classed("active", false);
		  svgDrag.remove();
		  onDrag = false;
		}

	    
		// fonction pour ajouter un écouteur à UN ÉLÉMENT
		//merci à https://developer.mozilla.org/fr/docs/DOM/element.addEventListener
		function ajoutEvent() { 
			//ajoute les évenements sur les faces
			for (var i = 1; i <= 4; i++) {
				for (var j = 1; j <= 6; j++) {
					var id = 'de'+i+'_'+j;
					var bb = document.getElementById(id).getBBox();										
					arrFaces.push({id:id, select:false, icone:'', bb:bb, type:'face'});
					//console.log('id='+id);					
			    	//var el = document.getElementById(id); 
			    	//el.addEventListener("click", setIcone,false); 			    	
				}
			} 	
			//initialise les icones
			setIcones();
			//ajoute les évenements sur les boutons
			arrBtn.forEach(function(btn){
			     var el = document.getElementById(btn.id); 
			     el.addEventListener("click", btn.fct,false);
			     el.setAttribute("class","btn"); 			    					
			});	
		}
		
		function setIcones(){
		    var svg = d3.select("#layer1").selectAll("svg")
		    	.data(arrFaces)
		    	.enter()
		    	.append("svg")
		    	.attr('id', function(d){
			    	return "svg_"+d.id;
			    	})
		    	.attr('x', function(d){
			    	return d.bb.x;
			    	})
	            .attr('y',  function(d){
			    	return d.bb.y;
		    	})
		    	.call(d3.drag()
		            .on("start", dragstarted)
		            .on("drag", dragged)
		            .on("end", dragended));
		    
			var faces = svg.append('foreignObject')
	            .attr('width', function(d){
			    	return d.bb.width+'px';
		    		})
	            .attr('height', function(d){
			    	return d.bb.height+'px';
	    			})
	            .append("xhtml:body")
	            	.attr("xmlns","http://www.w3.org/1999/xhtml")
		            .attr('width', function(d){
		            	return d.bb.width+'px';
	            	})
		            .attr('height', function(d){
		            	return d.bb.height+'px';
	            	})
		            .attr('class', "foreignBody")
		            .append('div')
		            	.style("line-height",function(d){
			            	return d.bb.height+'px';
		            	})
		            	.style("height",function(d){
			            	return d.bb.height+'px';
		            	})
		            	.style("width",function(d){
			            	return d.bb.width+'px';
		            	})
		            	.style("text-align","center")
						.on("click", function(d){
					    	if(!d.select){
						    	d3.select(this).style("background-color","red");
						    	d.select = true;
					    	}else{
						    	d3.select(this).style("background-color","transparent");
						    	d.select = false;
					    	}
						  	})		            	
						.on("mouseover", function(d){
					    	if(onDrag){
						    	//console.log('OVER -> drag:'+iconeDrag+',target:'+iconeTarget+',d.icone:'+d.icone);
					    		iconeTarget = d.icone;
					    		d.icone=iconeDrag;
						    	d3.select(this).style("background-color","blue");
						    	d3.select("#i_"+d.id).attr('class',"icon fa fa-4x "+iconeDrag);						    	 
					    	}else if(!d.select) d3.select(this).style("background-color","lightgray");
						  	})
						.on("mouseout", function(d){
							if(onDrag){
								d3.select("#i_"+d.id).attr('class',"icon fa fa-4x "+iconeTarget);
					    		d.icone=iconeTarget;
							} 
					    	//console.log('OUT -> drag:'+iconeDrag+',target:'+iconeTarget+',d.icone:'+d.icone);
					    	if(!d.select)d3.select(this).style("background-color","transparent");
						  });
			//.html('<div style="'+divStyle+'" >'+HTML+'</div>');	
		    //d3.select('#i_'+idEleEvt)
			faces.append("i")
				.attr('id',function(d){
						return "i_"+d.id;
					})
				.attr("class",function(d){
						d.icone = getRandomIcone();
					 	return "icon fa fa-4x "+d.icone;
					})
			  	//.style("padding","0px 5px 0px 5px")
		    	//.style("margin", "5px")
		    	//.style("border-radius", "16px")
		    	//.style("stroke", "none")
		    	//.style("cursor", "pointer")
		    	//.style("font-size", "7em")
		    	.style("line-height", "inherit")
		    	.on("mouseover", function(){
			    	//d3.select(this).style(hoveredStyle);
				  	})
				  .on("mouseout", function(){
				    //d3.select(this).style(defaultStyle);
				  })
				  .on("mousedown", function(d){
				    //d3.select(this).style(clickedStyle);
				    //iconClicked(d);
				  })
				  .on("mouseup", function(){
				    //d3.select(this).style(hoveredStyle);
				  });
	    }


		function setSvgDrag(d){
			//console.log(d.bb.x+','+d.bb.y);
		    svgDrag = svgGlobal.append("svg")
		    	.attr('id', 'svgDrag')
		    	.attr('x', d.bb.x-(d.bb.width/2))
	            .attr('y',  d.bb.y-d.bb.height-10)
			var faces = svgDrag.append('foreignObject')
	            .attr('width', d.bb.width+'px')
	            .attr('height',d.bb.height+'px')
	            .append("xhtml:body")
	            	.attr("xmlns","http://www.w3.org/1999/xhtml")
		            .attr('width', d.bb.width+'px')
		            .attr('height', d.bb.height+'px')
		            .attr('class', "foreignBody")
		            .append('div')
		            	.style("line-height",d.bb.height+'px')
		            	.style("height",d.bb.height+'px')
		            	.style("width",d.bb.width+'px')
		            	.style("text-align","center");
			faces.append("i")
				.attr("class","icon fa fa-4x "+d.icone)
		    	.style("line-height", "inherit");
	    }		

		function getRandomIcone(){
			return arrIcones[Math.round(rdm())].icone;
		}

		function setRandomIcone(){
			d3.select("#layer1").selectAll('i')
		    	.attr("class",function(d){
			    	return "icon fa fa-4x "+getRandomIcone();
		    	});
			
		}

		var hideListe = false;
		function showListe(evt){
			//console.log(evt);
			var p = d3.select("#gPalette");
			if(hideListe){
				p.style("visibility","hidden");
				hideListe = false;
			}else{
				p.style("visibility","visible");
				hideListe = true;
			}
		}

		function removeIcone(){
			d3.select("#layer1").selectAll("i")
		    	.attr("class",function(d){
		    		return d.select ? "" : "icon fa fa-4x "+d.icone;
		    	});
			d3.select("#layer1").selectAll("div")
				.style("background-color","transparent");
				
		}
		
		function iconClicked(icon){
		  console.log(icon + " clicked");
		}
		
		</script>		
	</body>
</html>