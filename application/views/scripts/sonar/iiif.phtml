<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="theme-color" content="black">
    <title>catégorisation d'un flux d'image</title>
    <link rel="shortcut icon" href="../img/papi-sonar.ico">
    <link rel="canonical" href="https://jardindesconnaissances.univ-paris8.fr/jdc/public/sonar/iiif">
    <link rel="manifest" href="../manifest/sonar-manifest.json">

    <link rel="stylesheet" type="text/css" href="../css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="../css/carousel.css" >
    <link rel="stylesheet" type="text/css" href="../css/sonar.css" >
    
    <script type="text/javascript" src="../js/d3.v5.min.js"></script>
    <script type="text/javascript" src="../js/jquery.min.js"></script>
    <script type="text/javascript" src="../js/site.js"></script>
    <script type="text/javascript" src="../js/polarclock.js"></script>
    <script type="text/javascript" src="../js/cartoaxes.js"></script>

    <script type="text/javascript" src="../font/font-awesome/all.min.js"></script>

    <style>
        body {
            font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
            overflow: hidden;
            font-size: small;
        }
        .bd-placeholder-img {
            font-size: 1.125rem;
            text-anchor: middle;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        @media (min-width: 768px) {
            .bd-placeholder-img-lg {
                font-size: 3.5rem;
            }
        }

        .bg-dark {
            background-color: #000000 !important;
            color:white;
        }

        .logo {
            vertical-align: top;
            height: 40px;
        }

        @font-face {
            font-family: "Quantify";
            src: url("../fonts/quantify/Quantify.ttf");
        }

        .logoTxt {
            vertical-align: sub;
            font-family: "Quantify";
        }

        .container {
            /*
            top: 280px;
            position: absolute;
            */
        }

        .modal-content {
            background-color: black;
        }


        select.btn-mini {
            height: auto;
            line-height: 14px;
        }

        /* this is optional (see below) */
        select.btn {
            -webkit-appearance: button;
            -moz-appearance: button;
                    appearance: button;
            padding-right: 16px;
            width: 80%;
        }

        select.btn-mini + .caret {
            margin-left: -20px;
            margin-top: 9px;
        }
    </style>

</head>

<body id="dummybodyid">
        <nav id='nbMain' class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
            <a class="navbar-brand" href="#">
                <img class='logo' src="../svg/logo-sonar.svg" alt="logo-sonar" />
                <span class='logoTxt'>SONAR IIIF</span>
                <img src="../svg/logo-paragraphe-blanc.svg" alt="logo-paragraphe" style="height:40px;" />
            </a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarCollapse"
                aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarCollapse">
                <ul class="navbar-nav mr-auto">
                    <li class="nav-item dropdown">
                        <div class="dropdown">
                            <button class="btn btn-dark dropdown-toggle" type="button" id="nvddCrible" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Cribles
                            </button>
                            <div id="optListeCpt" class="dropdown-menu" aria-labelledby="nvddCrible">
                            </div>
                        </div>
                    </li>                    
                    <li class="nav-item">
                        <div class="dropdown">
                            <button class="btn btn-dark dropdown-toggle" type="button" id="nvddFlux" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Source du flux IIIF
                            </button>
                            <div id="optSrcFlux" class="dropdown-menu" aria-labelledby="nvddFlux">
                            </div>
                        </div>
                    </li>
                    <li class="nav-item">
                        <div class="input-group">
                            <input type="text" class="form-control bg-dark" value="Aléa" disabled>

                            <div class="input-group-prepend">
                                <div class="input-group-text bg-dark">

                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="checkbox" id="ckAleaTaille">
                                        <label class="form-check-label" for="ckAleaTaille">Taille</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="checkbox" id="ckAleaOrdre">
                                        <label class="form-check-label" for="ckAleaOrdre">Ordre</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </li>
                    <li class="nav-item">
                        <button id='btnSrcFlux' class="btn btn-outline-success" >Charger</button>
                    </li>                                        
                </ul>

                <div class="navbar-nav my-2 my-lg-0">
                    <button class="btn btn-dark" ><span id='txtUti'></span></button>
                    <button class="btn btn-dark" ><span id='btnConnexion'></span></button>
                </div>
            </div>
        </nav>

    <main role="main" class="container">
        <div class="row justify-content-center">                

            <div id="carouselEvals" class="carousel slide" data-ride="carousel">
                <ol class="carousel-indicators" id="car-ind">
                </ol>
                <div class="carousel-inner" id="car-inn">
                </div>

                <a class="carousel-control-prev" href="#carouselEvals" role="button" data-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="sr-only">Previous</span>
                </a>
                <a class="carousel-control-next" href="#carouselEvals" role="button" data-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="sr-only">Next</span>
                </a>
            </div>

        </div>

            <div class="row justify-content-center" id='cartoEval'>                
                <svg>
                    <defs>
                        <linearGradient id="linear-gradient" y1="0.5" x2="1" y2="0.5" gradientUnits="objectBoundingBox">
                            <stop offset="0" stop-color="#54d6ff"></stop>
                            <stop offset="1" stop-color="#5fff84"></stop>
                        </linearGradient>
                        <linearGradient id="linear-gradient-2" x1="0.005" y1="0.585" x2="0.991" y2="0.585"
                            xlink:href="#linear-gradient">
                        </linearGradient>
                        <linearGradient id="center-gradient" x1="0.717" y1="1" x2="0" y2="1"
                            gradientUnits="objectBoundingBox">
                            <stop offset="0" stop-color="#5ffd8a"></stop>
                            <stop offset="0.65" stop-color="#58e6ce"></stop>
                            <stop offset="1" stop-color="#55daf2"></stop>
                        </linearGradient>
                        <linearGradient id="degraxeH" x1="0%" y1="0%" x2="100%" y2="0%">
                            <stop stop-color="rgb(173, 158, 253)" offset="0%"></stop>
                            <stop stop-color="rgb(252, 161, 205)" offset="100%"></stop>
                        </linearGradient>
                        <linearGradient id="degraxeV" x1="0%" y1="0%" x2="0%" y2="100%">
                            <stop stop-color="rgb(3, 246, 162)" offset="0%"></stop>
                            <stop stop-color="rgb(84, 214, 255)" offset="100%"></stop>
                        </linearGradient>
                    </defs>
                </svg>

            </div><!-- /.row -->

    </main>


    <!-- Fenêtre modale pour le temps de chargement -->
    <div class="modal fade" id="modWait" tabindex="-1" role="dialog" aria-labelledby="modWaitLbl" aria-hidden="true">
        <div class="modal-dialog modal-full" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modWaitLbl">Merci de patienter...</h5>
                </div>
                <div class="modal-body" style="height: 180px;">
                    <div id="loader" style="display:block;"></div>
                </div>
                <div class="modal-footer">
                </div>
            </div>
        </div>
    </div>


    <script src="../js/popper.min.js"></script>
    <script src="../js/bootstrap.min.js"></script>
    <script>


        // This is just to force HTTPS
        //probleme en local car pas de https if(location.protocol == 'http:') location.protocol = 'https:';
        if('serviceWorker' in navigator) {
        navigator.serviceWorker.register('../js/sonar-sw.js')
            .then(reg => console.log('Service Worker registered', reg))
            .catch(err => console.error('Service Worker **not** registered', err));

        }else {
            console.warn('Service Worker not supported in this browser');
        }    

        //récupère la géolocalisation de l'utilisateur
        if (navigator.geolocation) {
	        navigator.geolocation.getCurrentPosition(function(p){
                geo = p;
            });
        }

        var idBase = '<?php echo $this->idBase; ?>',
            uti = <?php echo $this->uti; ?>,
            urlColIIIF = '<?php echo $this->urlColIIIF; ?>', lstIIIF=[],
            urlColCrible = '<?php echo $this->urlColCribles; ?>',lstCrible = [],
            urlItemCrible = '<?php echo $this->urlItemCribles; ?>',lstItemCrible = [],
            height = window.innerHeight,
            width = window.innerWidth,
            svg, pc, ca, tofEval, geo=false,
            prefUrl = '../',
            sltFlux, sltCrible;
        //dimensionne les éléments
        //let navBarre = d3.select('.carousel').style('height',height/3);

        d3.select('.carousel').style('height',height/3);
                

        //gestion des événements
        d3.select('#btnSrcFlux')
            .on('click', function () {
                if(sltFlux.url){
                    showSource(sltFlux.url);
                }
            });
        d3.select('#btnConnexion')
            .on('click', function () {
                if(uti.login=='Anonyme')
                    showGoogleAuth();
                else if( d3.select('#txtUti').html)
                    deconnexion("sonar/iiif");
                else
                    connexion("sonar/iiif");
                //console.log("connexion ou déconnexion de l'utilisateur");
            });
        d3.select('#btnAjoutConcepts')
            .on('click', function () {
                console.log("ajoute une structure de concept");
            });
            
        //charges les données del'application
        showUti();
        getListeSource();
        getListeCrible();


        function showUti() {
            let btn = '<i class="fas fa-sign-in-alt"></i>';
            let u = uti.login;                          
            if (uti.login == 'Anonyme') {
                btn = "<img src=\'../img/google.png\' style=\'height: 30px;\' alt=\'connexion Google\' />";
                u='Connectez-vous';
            }  
            d3.select('#txtUti').html(u);
            d3.select('#btnConnexion').html(btn);
        }

        function showGoogleAuth(){
            window.location.href = "../auth/google?idBase="+idBase+"&redir=/sonar/iiif";
        }

        function getListeSource() {

            //ajoute la liste des flux
            $.ajax({
                url: urlColIIIF,
                dataType: "json",
                method: "GET",
                error: function (error) {
                    console.log("Erreur : " + error.responseText);
                },
                success: function (data) {
                    console.log(data);
                    lstIIIF = data;
                    d3.select('#optSrcFlux').selectAll('button').data(lstIIIF).enter()
                        .append('button')
                        .attr('type',"button")
                        .attr('class',function(d, i){
                            d.url = d['dcterms:isReferencedBy'] ? d['dcterms:isReferencedBy'][0]['@id'] : false;
                            if(i==0)sltFlux = d;
                            return i==0 ? 'dropdown-item active' : 'dropdown-item'
                        })
                        .html(function (d) {                            
                            return d.label = d['dcterms:title'] ? d['dcterms:title'][0]['@value'] : 'inconnu';
                            })
                        .on('click',function(s, i){
                            d3.select('#optSrcFlux').selectAll('button').attr('class',function(d){
                                return d['o:id'] == s['o:id'] ? 'dropdown-item active' : 'dropdown-item'
                            }); 
                            d3.select('#nvddFlux').html(s.label);
                            sltFlux = s;
                        });

                }
            });
        }

        function getListeCrible() {

            //ajoute la liste des flux
            $.ajax({
                url: urlColCrible,
                dataType: "json",
                method: "GET",
                error: function (error) {
                    console.log("Erreur : " + error.responseText);
                },
                success: function (data) {
                    console.log(data);
                    lstCrible = data;
                    //ajoute la liste des cribles
                    d3.select('#optListeCpt').selectAll('button').data(lstCrible).enter()
                        .append('button')
                        .attr('id', function (d, i) {
                            return 'omkId_'+d['o:id'];})
                        .attr('type',"button")
                        .attr('class',function(d, i){
                            if(i==0)sltCrible = d;
                            return i==0 ? 'dropdown-item active' : 'dropdown-item'
                        })
                        .html(function (d) {                            
                            return d.label = d['dcterms:title'] ? d['dcterms:title'][0]['@value'] : 'inconnu';})
                        .on('click',function(s,i){
                            d3.select('#optListeCpt').selectAll('button').attr('class',function(d){
                                return d['o:id'] == s['o:id'] ? 'dropdown-item active' : 'dropdown-item'
                            });
                            d3.select('#nvddCrible').html(s.label);
                            sltCrible = s; 
                        });
                }
            });
        }

        function showSource(src) {
            $('.navbar-collapse').collapse('hide');
            $('#modWait').modal('show');
            //
            $.ajax({
                url: src,
                dataType: "json",
                method: "GET",
                error: function (error) {
                    console.log("Erreur : " + error.responseText);
                    $('#modWait').modal('hide');
                },
                success: function (data) {
                    console.log(data);
                    //ajoute les photo à la gallery
                    ajoutPhotosGallerie(data.manifests);
                    //ajoute la cartographie
                    showCartoHorlo(data['@id']);
                }
            });
        }

        function ajoutPhotosGallerie(tofs) {

            //mélange toutes les photos
            let isAlea = document.getElementById("ckAleaOrdre").checked;
            if(isAlea) tofEval = d3.shuffle(tofs);
            tofEval = tofs;

            // Remove old elements as needed.
            d3.select('#car-ind').selectAll('li').remove();
            d3.select('#car-inn').selectAll('div').remove();


            //Ajoute la photo à la gallerie
            var li = d3.select('#car-ind').selectAll('li')
                .data(tofEval).enter().append('li')
                .attr('data-target', "#carouselEvals")
                .attr('data-slide-to', function (d, i) {
                    return i;
                })
                .attr('class', function (d, i) {
                    if (i == 0) return 'active';
                });

            var items = d3.select('#car-inn').selectAll('div')
                .data(tofEval).enter().append('div')
                .style('max-height', height / 3 + "px")
                .attr('class', function (d, i) {
                    var c = 'carousel-item';
                    if (i == 0) c += ' active';
                    return c;
                });

            //code pour ajouter des images
            items.append('img')
                .attr('id', function (d, i) {
                    d.idImg = 'img_' + i;
                    return d.idImg;
                })
                .attr('class', 'd-block img-fluid')
                .style('max-height', height / 3 + "px");

            //code pour ajouter des svg poru connaitre la taille
            items.append('svg')
                .attr('id', function (d, i) {
                    d.idSvg = 'svg_' + i;
                    return d.idSvg;
                })
                .style('width', "100%")
                .style('height', "100%")
                .append('rect')
                .attr('id', function (d, i) {
                    d.idRect = 'rect_' + i;
                    return d.idRect;
                })
                .style('width', '100%')
                .style('height', '100%')
                .style('position', 'absolute')
                .style('top', '0px')
                .style('fill-opacity', '0')
                .style('stroke-width', '4')
                .style('fill', 'none')
                .style('stroke', 'black');

            /*ajoute le descriptif
            var block = items.append('div').attr('class', 'carousel-caption d-none d-md-block');
            block.append('h3').text(function (d) {
                return d.label;
            });
            block.append('h4').text(function (d) {
                return d.idOmk;
            });
            block.append('p').append('a')
                .attr('href', function (d) {
                    return d.original;
                })
                .attr('target', '_blank').text('original');
            */

            initCarousel();
        }

        function initCarousel() {

            //ajoute les événements
            $('#carouselEvals').on('slid.bs.carousel', function (e) {
                //
                if (!tofEval[e.to].infos) {
                    //$('.carousel').carousel('pause');                                
                    getTofIIIF(e.to);
                    $('#modWait').modal('hide');
                }else{
                    //récupère les data
                    ca.idDoc = tofEval[e.to].idDoc;
                    ca.drawData();                    
                }
                console.log(e);
                $('.carousel').carousel('pause');                                
            })
            $('.carousel').carousel({
                interval: 5000
            })
            //$('.carousel').carousel();
            //$('.carousel').carousel('cycle');
            //$('.carousel').carousel(tofEval.length-1);		
            //$('.carousel').carousel('pause');                                

        }

        function getTofIIIF(num) {
            let d = tofEval[num];
            $.ajax({
                url: d['@id'],
                dataType: "json",
                method: "POST",
                error: function (error) {
                    console.log("getTofIIIF Erreur : " + error.responseText);
                },
                success: function (data) {
                    console.log(data);
                    d.infos = data;
                    let dt = false;
                    //vérifie la présence de visage
                    d.infos.metadata.forEach(function (t) {
                        if (t.label == "faceAnnotations") {
                            dt = getVisageTofIIIF(d, t);
                        }
                    })

                    //récupère l'image si pas de visage
                    if (!dt) {
                        let isAlea = document.getElementById("ckAleaTaille").checked;
                        dt = getTailleTofIIIF(d,isAlea);
                    }

                    //code pour ajouter une image HTML
                    d3.select("#" + d.idImg).attr('src', dt.url);

                    /*code pour une image SVG
                    d3.select("#"+d.idSvg).append('image')
                        .attr('class','iiif')
                        .attr('x',0)
                        .attr('y',0)
                        .attr('xlink:href',url);
                    */

                    //précise l'url à la carto
                    d.idDoc = dt.url;
                    ca.idDoc = dt.url;
                    //précise le json de la photo
                    ca.data = {
                        'IIIF':d.infos.sequences[0].canvases[0].images[0].resource.service["@id"]+'/info.json'
                        ,'manifest':d['@id']
                        ,'metadata':d.infos.metadata
                        ,'title':d.infos.label
                        ,'height':dt.h
                        ,'width':dt.w
                    };


                    //affiche les données enregistrées
                    ca.drawData();                    

                }
            });

        }


        function getTailleTofIIIF(d, alea) {
            //item vient de IIIF
            //récupère la position et la taille du rectangle
            let bb = d3.select('#' + d.idRect).node().getBBox();

            //calcule l'url IIIF
            let minPixel = 0,
                imgOmk = d.infos.sequences[0].canvases[0].images[0].resource.service["@id"],
                w = d.infos.sequences[0].canvases[0].width, h = d.infos.sequences[0].canvases[0].height, img = {};
                img.r = 0;
            if (!d.images) d.images = [];
            if(alea){
                img.w = parseInt(w < bb.width ? bb.width : bb.width);
                img.h = parseInt(h < bb.height ? bb.height : bb.height);
                img.x = parseInt(d3.randomUniform(minPixel, w > img.w ? w - img.w : w)());
                img.y = parseInt(d3.randomUniform(minPixel, h > img.h ? h - img.h : h)());
            }else{
                //Zoom si la photo est trop petite
                let zoom = w < bb.width ? bb.width/w : 1;
                img.w = parseInt(w*zoom);
                img.h = parseInt(h*zoom);
                img.x = 0;
                img.y = 0;
            }
            //calcul la taille de représentation
            var MAX_WIDTH = bb.width;
            var MAX_HEIGHT = bb.height;
            var width = img.w;
            var height = img.h;

            if (width > height) {
                if (width > MAX_WIDTH) {
                    height *= MAX_WIDTH / width;
                    width = MAX_WIDTH;
                }
            } else {
                if (height > MAX_HEIGHT) {
                    width *= MAX_HEIGHT / height;
                    height = MAX_HEIGHT;
                }
            }

            //construction de l'url
            img.url = imgOmk + '/' + img.x + ',' + img.y + ',' + (img.w) + ',' + (img.h) + '/' 
                + parseInt(width) + ',' + parseInt(height) + '/' + img.r + '/default.jpg';
            console.log(img);
            d.images.push(img);

            return {'url':img.url,'h':parseInt(height),'w':parseInt(width)};
        }

        function getVisageTofIIIF(d, t) {
            //item vient de IIIF
            //récupère la position et la taille du rectangle
            let bb = d3.select('#' + d.idRect).node().getBBox();

            //récupère a défitinition du visage
            let vs = JSON.parse('[' + t.value + ']');
            console.log(vs);

            let img, imgOmk = d.infos.sequences[0].canvases[0].images[0].resource.service["@id"];
            vs.forEach(function (v) {
                //calcule l'url IIIF        
                if (!d.images) d.images = [];
                img = {
                    'w': v.boundingPoly.vertices[1].x - v.boundingPoly.vertices[0].x,
                    'h': v.boundingPoly.vertices[2].y - v.boundingPoly.vertices[0].y,
                    'x': v.boundingPoly.vertices[0].x,
                    'y': v.boundingPoly.vertices[0].y,
                    'r': 0
                };
                img.url = imgOmk + '/' + img.x + ',' + img.y + ',' + (img.w) + ',' + (img.h) + '/' + parseInt(bb
                    .width) + ',' + parseInt(bb.height) + '/' + img.r + '/default.jpg';
                console.log(img);
                d.images.push(img);
            });
            return {'url':img.url,'h':parseInt(bb.height),'w':parseInt(bb.width)};
        }

        function showCartoHorlo(id) {
            //récupère la taille du conteneur
            let c = document.getElementById('cartoEval');
            //calcul les tailles
            let spacing = 0.000001,
                w = width,
                h = height / 2, //w = c.clientWidth, h = c.clientHeight,        
                rayon = w < h ? w / 2 : h / 2;
            
            //suprime le composants existants
            d3.select(".cartoaxes").remove();
            d3.select(".polarclock").remove();

            svg = d3.select("#cartoEval svg")
                .attr("id", "svgGlobal")
                .attr("width", w)
                .attr("height", h);
            //ajoute la polar clock
            pc = new polarclock({
                'idSvg': 'svgGlobal',
                'spacing': spacing,
                'width': w,
                'height': h,
                'chrono': true,
                'nbCouche': 6
            });
            //récupère le crible
            let urlCpt = urlItemCrible+sltCrible["dcterms:title"][0]["@value"]; 
            
            $.ajax({
                url: urlCpt,
                dataType: "json",
                method: "GET",
                error: function (error) {
                    console.log("getConcept Erreur : " + error.responseText);
                },
                success: function (data) {
                    //ajoute la carto axe            
                    lstItemCrible = [];
                    var lbl,id,lblP,idP, ordre;
                    data.forEach(function(d, i){
                        lbl = d['skos:prefLabel'][0]['@value'];
                        id = d['o:id'];
                        lblP = d['skos:inScheme'][0]['display_title'];
                        idP = d['skos:inScheme'][0]['value_resource_id'];
                        ordre = d['jdc:ordreCrible'] ? d['jdc:ordreCrible'][0]['@value'] : i;
                        lstItemCrible.push({'label':lbl,'id':id,'idP':idP,'labelP':lblP,'ordre':ordre});
                    });
                    //tri les items du crible
                    lstItemCrible.sort(function(a, b) {
                        return a.ordre - b.ordre;
                    });
                    //construction de la cartographie par axe
                    ca = new cartoaxes({
                        'idSvg': 'svgGlobal',
                        'tick': 0,
                        'idDoc': id,
                        'urlData':'../sonar/flux?q=getEvalsOmk',
                        'typeSrc':'IIIF',
                        'inScheme':lblP,
                        'crible': lstItemCrible,
                        'titre':sltCrible["dcterms:title"][0]["@value"],
                        'fctGetGrad': pc.getInstantColors,
                        'fctSavePosi': savePosi,
                        'width': w,
                        'height': h
                    });
                    //pc.toggleTimer();
                    pc.resetTimer()
                  

                }
            });

        }

        function savePosi(d) {
            d.idFlux = sltFlux['o:id'];
            d.idCrible = sltCrible['o:id'];
            let omk = {
                'dcterms:title':sltFlux["dcterms:title"][0]["@value"]+' _ '+d.infos.title+' : '+d.degrad.date
                ,'dcterms:isReferencedBy':d.infos.title+' : '+d.degrad.date+' : '+uti.login
                ,'dcterms:isPartOf':[{'type':'resource','value':d.idFlux}]
                ,'resource_class':"SemanticPosition"
                ,'ma:creationDate':d.degrad.date
                ,'ma:hasCreator':uti.login
                ,'ma:hasRating':[]
                ,'ma:isRatingOf':[]
                ,'ma:ratingScaleMax':ca.xMax
                ,'ma:ratingScaleMin':ca.xMin
                ,'ma:hasRatingSystem':[{'type':'resource','value':d.idCrible}]
                ,'ma:locationLatitude':geo.coords.latitude
                ,'ma:locationLongitude':geo.coords.longitude
                ,'ma:hasSource':d.id
                ,'ma:frameHeight':d.infos.height
                ,'ma:frameWidth':d.infos.width
                ,'ma:isFragmentOf':{'title':d.infos.title,'IIIF':d.infos.IIIF,'manifest':d.infos.manifest,'metadata':d.infos.metadata}
                ,'jdc:degradName':d.degrad.nom
                ,'jdc:degradColors':d.degrad.colors
                ,'jdc:hasDoc':d.id
                ,'jdc:distanceCenter':d.distance
                ,'jdc:hasConcept':[]
                ,'jdc:distanceConcept':[]
                ,'jdc:x':d.x
                ,'jdc:y':d.y
                ,'jdc:xRatingValue':d.numX
                ,'jdc:yRatingValue':d.numY
            }
            d.crible.forEach(function(c){
                omk['ma:hasRating'].push(c.p);
                omk['ma:isRatingOf'].push({'type':'resource','value':c.t.id});
                omk['jdc:hasConcept'].push({'type':'resource','value':c.t.id});
                omk['jdc:distanceConcept'].push(c.p);
            })
            //message pour patienter
            $('#modWait').modal('show');
            //carrousel en pause
            $('.carousel').carousel('pause');                                
            $.post('../sonar/flux', {
                    'q': 'savePosiOmk',
                    'type':'IIIF',
                    'dt': omk                    
                }, function (data) {
                    console.log(data);
                }, "json")
                .fail(function (e) {
                    throw new Error("Sauvegarde imposible : " + e);
                })
                .always(function () {
                    $('#modWait').modal('hide');
                });
        }
        $('.navbar-collapse').collapse('show');

    </script>
</body>

</html>