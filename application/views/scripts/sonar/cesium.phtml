<?php
//https://cesiumjs.org/Cesium/Build/Apps/Sandcastle/?src=Cartographic%20Limit%20Rectangle.html
//https://cesiumjs.org/Cesium/Build/Apps/Sandcastle/?src=Clustering.html
//https://cesiumjs.org/Cesium/Build/Apps/Sandcastle/?src=Custom%20DataSource.html
?>
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">
    <meta name="description" content="Visualisation des pulsations cognitives dans un écosystème de connaissances">
    <title>JDC - Sonar - Pulsations cognitives</title>

    <link rel="stylesheet" type="text/css" href="../css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="../css/w2ui-1.5.rc1.min.css" />
    <link rel="stylesheet" type="text/css" href="../css/sonar-dashboard.css">
        
    <style>
        @font-face {
            font-family: "Quantify";
            src: url("../fonts/quantify/Quantify.ttf");
        }
        .logo {
            vertical-align: top;
            height: 40px;
        }
        .logoTxt {
            vertical-align: sub;
            font-family: "Quantify";
        }    
    </style>

    
</head>
<body class="sandcastle-loading" data-sandcastle-bucket="bucket-requirejs.html">
<style>
    @import url(../templates/bucket.css);
</style>


<nav id="navMain" class="navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow">
  <a class="navbar-brand col-sm-3 col-md-2 mr-0" href="#">
        <img class='logo' src="../svg/logo-sonar.svg" alt="logo-sonar" />
        <span class='logoTxt'>SONAR</span>
        <img src="../svg/logo-paragraphe-blanc.svg" alt="logo-paragraphe" style="height:40px;" />
  </a>
  <input class="form-control form-control-dark w-100" type="text" placeholder="Search" aria-label="Search">
  <ul class="navbar-nav px-3">
    <li class="nav-item text-nowrap">
        <button class="btn btn-dark" ><span id='txtUti'></span></button>
        <button class="btn btn-dark" ><span id='btnConnexion'></span></button>
    </li>
  </ul>
</nav>

<div class="container-fluid">
  <div class="row">
    <nav class="col-md-2 d-none d-md-block bg-light sidebar">
      <div class="sidebar-sticky">
        <h6 class="sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted">
            <span>Les dimensions</span>
        </h6>
        <div id="layoutListe" class="nav flex-column" style="width: 100%; height: 100%;"></div>
      </div>
    </nav>

    <main role="main" class="col-md-9 ml-sm-auto col-lg-10 px-4">
      <div id="contCesium" class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
            <div id="cesiumContainer" class="fullSize"></div>
            <div id="loadingOverlay"><h1>Loading...</h1></div>
      </div>

      
    </main>
  </div>
</div>

<script type="text/javascript" src="../js/jquery.min.js"></script>
<script type="text/javascript" src="../js/popper.min.js"></script>
<script type="text/javascript" src="../js/bootstrap.min.js"></script>
<script type="text/javascript" src="../js/d3.V5.min.js"></script>
<script type="text/javascript" src="../font/font-awesome/all.min.js"></script>
<script type="text/javascript" src="../js/w2ui.min.js"></script>

<script type="text/javascript" src="../js/cesium/Sandcastle-header.js"></script>
<script type="text/javascript" src="../js/cesium/Cesium.js"></script>
<script type="text/javascript" src="../js/cesiumCribleConceptuel.js"></script>
<script type="text/javascript" src="../js/cesiumActeur.js"></script>
<script type="text/javascript" src="../js/cesiumDocument.js"></script>
<script type="text/javascript" src="../js/cesiumRapport.js"></script>
<script type="text/javascript" src="../js/site.js"></script>

<script id="cesium_sandcastle_script">
var idBase = '<?php echo $this->idBase; ?>',
    uti = <?php echo $this->uti; ?>;            

//charges les données de l'application
showUti();
initConnexion('sonar/cesium');

//Create a Viewer instances and add the DataSource.
Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJiYTI3OWI2My03MDNlLTQyZjAtYWY5OS02ZTU5MGY2MjFkMjUiLCJpZCI6MTQ2MjAsInNjb3BlcyI6WyJhc3IiLCJnYyJdLCJpYXQiOjE1NjU5NDU1MzR9.zuJWBeovOnevAVL2LCjrLN8vN3zswKTuPVdRh28hWmc';
var viewer = new Cesium.Viewer('cesiumContainer', {
    animation : false
    ,timeline : false
    ,terrainProvider:false        
});
viewer.clock.shouldAnimate = false;


function startup(Cesium) {
    'use strict';

    var height = window.innerHeight - document.getElementById('navMain').clientHeight;
    d3.select('#contCesium').style('height',height+"px");
    

    var altSurface = 10000000.0, maxTailleTof = 10000;
    //échelle des taille de photo
    var scaleEast = d3.scaleSqrt()
        .range( [0, 180] )
        .domain( [0, maxTailleTof] ); 
    var scaleNorth = d3.scaleSqrt()
        .range( [0, 90] )
        .domain( [0, maxTailleTof] ); 

    //Sandcastle_Begin
    /**
     * This class is an example of a custom DataSource.  It loads JSON data as
     * defined by Google's WebGL Globe, https://github.com/dataarts/webgl-globe.
     * @alias WebGLGlobeDataSource
     * @constructor
     *
     * @param {String} [name] The name of this data source.  If undefined, a name
     *                        will be derived from the url.
     *
     * @example
     * var dataSource = new Cesium.WebGLGlobeDataSource();
     * dataSource.loadUrl('sample.json');
     * viewer.dataSources.add(dataSource);
     */
    function WebGLGlobeDataSource(name) {
        //All public configuration is defined as ES5 properties
        //These are just the "private" variables and their defaults.
        this._name = name;
        this._changed = new Cesium.Event();
        this._error = new Cesium.Event();
        this._isLoading = false;
        this._loading = new Cesium.Event();
        this._entityCollection = new Cesium.EntityCollection();
        this._seriesNames = [];
        this._seriesToDisplay = undefined;
        this._heightScale = 10000000;
        this._entityCluster = new Cesium.EntityCluster();
    }

    Object.defineProperties(WebGLGlobeDataSource.prototype, {
    //The below properties must be implemented by all DataSource instances

    /**
     * Gets a human-readable name for this instance.
     * @memberof WebGLGlobeDataSource.prototype
     * @type {String}
     */
    name : {
        get : function() {
            return this._name;
        }
    },
    /**
     * Since WebGL Globe JSON is not time-dynamic, this property is always undefined.
     * @memberof WebGLGlobeDataSource.prototype
     * @type {DataSourceClock}
     */
    clock : {
        value : undefined,
        writable : false
    },
    /**
     * Gets the collection of Entity instances.
     * @memberof WebGLGlobeDataSource.prototype
     * @type {EntityCollection}
     */
    entities : {
        get : function() {
            return this._entityCollection;
        }
    },
    /**
     * Gets a value indicating if the data source is currently loading data.
     * @memberof WebGLGlobeDataSource.prototype
     * @type {Boolean}
     */
    isLoading : {
        get : function() {
            return this._isLoading;
        }
    },
    /**
     * Gets an event that will be raised when the underlying data changes.
     * @memberof WebGLGlobeDataSource.prototype
     * @type {Event}
     */
    changedEvent : {
        get : function() {
            return this._changed;
        }
    },
    /**
     * Gets an event that will be raised if an error is encountered during
     * processing.
     * @memberof WebGLGlobeDataSource.prototype
     * @type {Event}
     */
    errorEvent : {
        get : function() {
            return this._error;
        }
    },
    /**
     * Gets an event that will be raised when the data source either starts or
     * stops loading.
     * @memberof WebGLGlobeDataSource.prototype
     * @type {Event}
     */
    loadingEvent : {
        get : function() {
            return this._loading;
        }
    },

    //These properties are specific to this DataSource.

    /**
     * Gets the array of series names.
     * @memberof WebGLGlobeDataSource.prototype
     * @type {String[]}
     */
    seriesNames : {
        get : function() {
            return this._seriesNames;
        }
    },
    /**
     * Gets or sets the name of the series to display.  WebGL JSON is designed
     * so that only one series is viewed at a time.  Valid values are defined
     * in the seriesNames property.
     * @memberof WebGLGlobeDataSource.prototype
     * @type {String}
     */
    seriesToDisplay : {
        get : function() {
            return this._seriesToDisplay;
        },
        set : function(value) {
            this._seriesToDisplay = value;

            //Iterate over all entities and set their show property
            //to true only if they are part of the current series.
            var collection = this._entityCollection;
            var entities = collection.values;
            collection.suspendEvents();
            for (var i = 0; i < entities.length; i++) {
                var entity = entities[i];
                entity.show = value === entity.seriesName;
            }
            collection.resumeEvents();
        }
    },
    /**
     * Gets or sets the scale factor applied to the height of each line.
     * @memberof WebGLGlobeDataSource.prototype
     * @type {Number}
     */
    heightScale : {
        get : function() {
            return this._heightScale;
        },
        set : function(value) {
            if (value > 0) {
                throw new Cesium.DeveloperError('value must be greater than 0');
            }
            this._heightScale = value;
        }
    },
    /**
     * Gets whether or not this data source should be displayed.
     * @memberof WebGLGlobeDataSource.prototype
     * @type {Boolean}
     */
    show : {
        get : function() {
            return this._entityCollection;
        },
        set : function(value) {
            this._entityCollection = value;
        }
    },
    /**
     * Gets or sets the clustering options for this data source. This object can be shared between multiple data sources.
     * @memberof WebGLGlobeDataSource.prototype
     * @type {EntityCluster}
     */
    clustering : {
        get : function() {
            return this._entityCluster;
        },
        set : function(value) {
            if (!Cesium.defined(value)) {
                throw new Cesium.DeveloperError('value must be defined.');
            }
            this._entityCluster = value;
        }
    }
    });

    /**
     * Asynchronously loads the GeoJSON at the provided url, replacing any existing data.
     * @param {Object} url The url to be processed.
     * @returns {Promise} a promise that will resolve when the GeoJSON is loaded.
     */
    WebGLGlobeDataSource.prototype.loadUrl = function(url) {
    if (!Cesium.defined(url)) {
        throw new Cesium.DeveloperError('url is required.');
    }

    //Create a name based on the url
    var name = Cesium.getFilenameFromUri(url);

    //Set the name if it is different than the current name.
    if (this._name !== name) {
        this._name = name;
        this._changed.raiseEvent(this);
    }

    //Use 'when' to load the URL into a json object
    //and then process is with the `load` function.
    var that = this;
    return Cesium.Resource.fetchJson(url).then(function(json) {
        return that.load(json, url);
    }).otherwise(function(error) {
        //Otherwise will catch any errors or exceptions that occur
        //during the promise processing. When this happens,
        //we raise the error event and reject the promise.
        this._setLoading(false);
        that._error.raiseEvent(that, error);
        return Cesium.when.reject(error);
    });
    };

    /**
     * Loads the provided data, replacing any existing data.
     * @param {Array} data The object to be processed.
     */
    WebGLGlobeDataSource.prototype.load = function(allData) {
        //>>includeStart('debug', pragmas.debug);
        if (!Cesium.defined(allData)) {
            throw new Cesium.DeveloperError('data is required.');
        }
        //>>includeEnd('debug');

        //Clear out any data that might already exist.
        this._setLoading(true);
        this._seriesNames.length = 0;
        this._seriesToDisplay = undefined;

        var heightScale = this.heightScale;
        var entities = this._entityCollection;

        //It's a good idea to suspend events when making changes to a
        //large amount of entities.  This will cause events to be batched up
        //into the minimal amount of function calls and all take place at the
        //end of processing (when resumeEvents is called).
        entities.suspendEvents();
        entities.removeAll();

        console.log('START data');
        //positionne le max de position à afficher
        var debug = 8000000;
        //la structure des données est basée sur 
        //la modélisation onto-éthique d'une existence informationnelle

        //construction des listes dans un grid pour sélection
        grids.docs.records = allData.result.documents;
        w2ui['layoutDimensions'].content('top', $().w2grid(grids.docs));        
        grids.acteurs.records = allData.result.acteurs;
        w2ui['layoutDimensions'].content('main', $().w2grid(grids.acteurs));        
        grids.cribles.records = allData.result.cribles;
        w2ui['layoutDimensions'].content('bottom', $().w2grid(grids.cribles));        


        //ajoute les documents
        allData.result.documents.forEach(function(d,i){
            
            /*ajoute un rectangle avec l'image
            */
            var altCouche = 3, cImages=[];
            var hght = altSurface * (altCouche + i);
            //TODO:gérer la géolocalisation des documents
            //calcul paramétrique de l aposition des document
            var cW = 0, cS = 0, cE = scaleEast(d.details.img.width), cN = scaleNorth(d.details.img.height);
            d.lat = cN ? cN : 0;
            d.lng = cE ? cE : 0;
            d.altitude = hght;
            d.oCesium = cImages.push(new cesiumDocument({
                'label':d.label,
                'id':d.recid,
                'urlImg':d.details.img["@id"],
                'width' : d.details.img.width,
                'height' : d.details.img.height,
                'lng':cE,
                'lat':cN,
                'entities':entities,
                'altitude':hght
            }))
        });

        //ajouter les cribles
        var radius = 6;
        //for (const idC in allData.result.cribles) {
        //    let c = allData.result.cribles[idC];
        allData.result.cribles.forEach(function(c,i){
            //limite les positions pour débug
            if(i<=debug){
                //TODO : calculer un positionnement plus juste cf. topologie D3
                c.lng = (radius*i*4)+1;//ATTENTION si 0 prend position par défaut
                c.lat = 1;
                c.radius = radius;
                //TODO: calculer l'altitude suivant l'historique des positions
                c.altitude = 0;
                c.oCesium = new cesiumCribleConceptuel({
                    'titre':c.label,
                    'crible':c.concepts,
                    //P8
                    'lng':c.lng,
                    'lat':c.lat,
                    'entities':entities,
                    'radius':c.radius,
                    'altitude':c.altitutude
                });
            }
        });

        //ajouter les acteurs et les rapports
        var caColor=[];
        allData.result.rapports.forEach(function(r,i){
            //limite les positions pour débug
            if(i<=debug){
                //création de l'acteur à la position de l'évaluation
                if(!caColor[r['idAct']])
                    caColor[r['idAct']]=Cesium.Color.fromRandom({alpha : 0.3});
                //TODO:création de l'acteur sous forme fullerénique
                //cf. https://onlinelibrary.wiley.com/doi/pdf/10.1002/wcms.1207
                let act = allData.result.acteurs[r['idAct']];        
                if(!act.positions)act.positions=[];
                act.positions.push(new cesiumActeur({
                    'label':act.label,
                    'id':act.recid,
                    'color':caColor[r['idAct']],
                    'lng':parseFloat(r['lng']),
                    'lat':parseFloat(r['lat']),
                    'entities':entities,
                    'radius':1000,
                    'altitude':altSurface,
                }));
                //création du rapport entre le document, l'acteur et le crible
                r.oCesium = new cesiumRapport({
                    'label':'rapport',
                    'id':r.details['o:id'],
                    'color':caColor[r['idAct']],
                    'lng':parseFloat(r['lng']),
                    'lat':parseFloat(r['lat']),
                    'data':r,
                    'entities':entities,
                    'altitude':altSurface,
                    'act':act,
                    'doc':allData.result.documents[r['idDoc']],
                    'crb':allData.result.cribles[r['idCrible']]
                })
                //
            }
        });
        console.log('END data')



        //ajouter les liens acteur->document acteur->concept 

        //Once all data is processed, call resumeEvents and raise the changed event.
        entities.resumeEvents();
        this._changed.raiseEvent(this);
        this._setLoading(false);
    };

    WebGLGlobeDataSource.prototype._setLoading = function(isLoading) {
    if (this._isLoading !== isLoading) {
        this._isLoading = isLoading;
        this._loading.raiseEvent(this, isLoading);
    }
    };

    //Now that we've defined our own DataSource, we can use it to load
    //any JSON data formatted for WebGL Globe.
    var dataSource = new WebGLGlobeDataSource();
    var urlData = '../sonar/flux?q=getPulsationsOntoEthique';
    dataSource.loadUrl(urlData).then(function() {

        //After the initial load, create buttons to let the user switch among series.
        function createSeriesSetter(seriesName) {
            return function() {
                dataSource.seriesToDisplay = seriesName;
            };
        }
        for (var i = 0; i < dataSource.seriesNames.length; i++) {
            var seriesName = dataSource.seriesNames[i];
            //Sandcastle.addToolbarButton(seriesName, createSeriesSetter(seriesName));
        }
    });
    
    //ajoute le data source au viewer
    viewer.dataSources.add(dataSource);


    // Tropics of Cancer and Capricorn
    //var coffeeBeltRectangle = Cesium.Rectangle.fromDegrees(-180.0, -23.43687, 180.0, 23.43687);
    // hemisphère nord
    //var coffeeBeltRectangle = Cesium.Rectangle.fromDegrees(-180.0, 0, 180, 90);
    // hemisphère sud
    //var coffeeBeltRectangle = Cesium.Rectangle.fromDegrees(-180.0, -90, 180, 0);
    //viewer.scene.globe.cartographicLimitRectangle = coffeeBeltRectangle;

    viewer.scene.skyAtmosphere.show = true;


    var promise = Cesium.GeoJsonDataSource.load('../data/ne_110m_admin_0_countries.geojson');
    //var promise = Cesium.GeoJsonDataSource.load('../data/europe.geojson');
    
    promise.then(function(dataGeo) {
        viewer.dataSources.add(dataGeo);

        //Get the array of entities
        var entities = dataGeo.entities.values;

        var colorHash = {};
        for (var i = 0; i < entities.length; i++) {
            //For each entity, create a random color based on the state name.
            //Some states have multiple entities, so we store the color in a
            //hash so that we use the same color for the entire state.
            var entity = entities[i];
            var name = entity.name;
            /*
            var color = colorHash[name];
            if (!color) {
                color = Cesium.Color.fromRandom({
                    alpha : 0.8
                });
                colorHash[name] = color;
            }
            */
            var color = colorHash[name] = Cesium.Color.fromRandom({
                        red : 1.0,
                        green : 1.0,
                        blue : 1.0,
                        alpha : 0.6
                    });
            //Set the polygon material to our random color.
            entity.polygon.material = color;
            //Remove the outlines.
            entity.polygon.outline = false;

            //Extrude the polygon based on the state's population.  Each entity
            //stores the properties for the GeoJSON feature it was created from
            //Since the population is a huge number, we divide by 50.
            //entity.polygon.extrudedHeight = 30000000;
            entity.polygon.height = altSurface;
        }
    }).otherwise(function(error){
        //Display any errrors encountered while loading.
        window.alert(error);
    });        

    //Sandcastle_End
    Sandcastle.finishedLoading();

}

if (typeof Cesium !== 'undefined') {
    startup(Cesium);
} else if (typeof require === 'function') {
    require(['Cesium'], startup);
}

//construction des grids
var contentHeight = 200, style = 'color:black;';
var grids = {'docs':
    {   name: 'gridDocs', 
        style      : style,
        header: 'Documents',		
        show: { 
            header			: true,		
            toolbar			: true,
            toolbarReload   : false,
            toolbarColumns  : false,
            toolbarSearch   : true,
            toolbarAdd      : false,
            toolbarDelete   : false,
            toolbarSave		: false,
            selectColumn	: true,
            footer			: true,
        },
        columns: [         
            { field: 'recid', caption: 'ID', size: '50px', hidden:true, sortable: true, resizable: true },
            { field: 'label', caption: 'Label', size: '100%', sortable: true, resizable: true},
        ],
        records: [],
        onSelect: function (event) {
            event.onComplete = function () {
                var s = w2ui['gridDocs'].getSelection();
                    if(s.length)
                        mouvetoDimension(s);
            }
        },
        onUnselect: function (event) {
            event.onComplete = function () {
            }
        },	    
        onAdd: function(event) {
            console.log(event);
        }			    
    },
    'acteurs':{ 
        name: 'gridActeurs', 
        style      : style,
        header: "Acteurs",		
        show: { 
            header			: true,		
            toolbar			: true,
            toolbarReload   : false,
            toolbarColumns  : false,
            toolbarSearch   : true,
            toolbarAdd      : false,
            toolbarDelete   : false,
            toolbarSave		: false,
            selectColumn	: true,
            footer			: true,
        },
        columns: [         
            { field: 'recid', caption: 'ID', size: '50px', hidden:true, sortable: true, resizable: true },
            { field: 'label', caption: 'Valeur', size: '100%', sortable: true, resizable: true},
        ],
        records: [],
        onSelect: function (event) {
            event.onComplete = function () {
                console.log(event);
            }
        },	 
        onUnselect: function (event) {
            event.onComplete = function () {
                console.log(event);
            }
        },	    
    },       
    'cribles':{ 
        name: 'gridCribles', 
        style      : style,
        header: "Cribles",		
        show: { 
            header			: true,		
            toolbar			: true,
            toolbarReload   : false,
            toolbarColumns  : false,
            toolbarSearch   : true,
            toolbarAdd      : false,
            toolbarDelete   : false,
            toolbarSave		: false,
            selectColumn	: true,
            footer			: true,
        },
        columns: [         
            { field: 'recid', caption: 'ID', size: '50px', hidden:true, sortable: true, resizable: true },
            { field: 'label', caption: 'Valeur', size: '100%', sortable: true, resizable: true},
        ],
        records: [],
        onSelect: function (event) {
            event.onComplete = function () {
                console.log(event);
            }
        },	 
        onUnselect: function (event) {
            event.onComplete = function () {
                console.log(event);
            }
        },	    
    }       
};

$(function () {
    var pstyle = 'border: 1px solid #dfdfdf; padding: 5px;';
    $('#layoutListe').w2layout({
        name: 'layoutDimensions',
        padding: 2,
        panels: [
            { type: 'top', size: 200, resizable: true, style: pstyle, content: 'top' },
            { type: 'main', size: 200, resizable: true, style: pstyle, content: 'main' },
            { type: 'bottom', size: 200, resizable: true, style: pstyle, content: 'right' }
        ]
    });
});

function mouvetoDimension(d){


    var center = Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883);
    var transform = Cesium.Transforms.eastNorthUpToFixedFrame(center);

    // View in east-north-up frame
    var camera = viewer.camera;
    camera.constrainedAxis = Cesium.Cartesian3.UNIT_Z;
    camera.lookAtTransform(transform, new Cesium.Cartesian3(-120000.0, -120000.0, 120000.0));

    // Show reference frame.  Not required.
    referenceFramePrimitive = scene.primitives.add(new Cesium.DebugModelMatrixPrimitive({
        modelMatrix : transform,
        length : 100000.0
    }));
    /*
    viewer.camera.flyTo({
        destination : Cesium.Cartesian3.fromDegrees(-122.22, 46.12, 5000.0),
        orientation : {
            heading : Cesium.Math.toRadians(20.0),
            pitch : Cesium.Math.toRadians(-35.0),
            roll : 0.0
        }
    });
    */
}

</script>
</body>
</html>

