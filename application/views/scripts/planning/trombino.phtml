<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title>Trombinoscope des étudiants</title>
	    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
		
	    <!-- Bootstrap CSS -->
	    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css" integrity="sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb" crossorigin="anonymous">
		<script src="https://d3js.org/d3.v4.min.js"></script>
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=" crossorigin="anonymous"></script>
		<script src="http://dimplejs.org/dist/dimple.v2.3.0.min.js"></script>
		<style type="text/css">
		/*pour les initiales en majuscule*/
		.card-title:first-letter{
			text-transform: uppercase;
		}
		/*pour le donuts merci à https://bl.ocks.org/mbhall88/b2504f8f3e384de4ff2b9dfa60f325e2 */
		polyline{
		    opacity: .3;
		    stroke: black;
		    stroke-width: 2px;
		    fill: none;
		}		
		/* Make the percentage on the text labels bold*/
		.labelName tspan {
		    font-style: normal;
		    font-weight: 700;
		}		
		/* In biology we generally italicise species names. */
		.labelName {
		    font-size: 0.9em;
		    font-style: italic;
		}
		
		
		</style>
	</head>
<body>
	<div class="container">
        <div class="row"  >

            <nav class="navbar navbar-light">
                    <form class="form-inline my-2 my-lg-2">
                        <select class="custom-select custom-select-lg mb-3 mr-sm-2">
                            <option selected>Formations</option>
                            <option value="1">One</option>
                            <option value="2">Two</option>
                            <option value="3">Three</option>
                        </select>
                        <select class="custom-select custom-select-lg mb-3 mr-sm-2">
                            <option selected>Promotions</option>
                            <option value="1">One</option>
                            <option value="2">Two</option>
                            <option value="3">Three</option>
                        </select>
                    </form>
            </nav>
		</div>
		<div class="row" id="etuCards" >
		</div>
	</div>	
			
<script>

var dataPhoto, dataForm;
var vals = {"Pas besoin":1, "Besoin d'approfondissement":5, "Besoin urgent":10, "je ne connais pas du tout":1,"je connais un peu":5,"je me débrouille":10,"je suis expert(e)":20};

//récupération des photos du groupe flickr
//merci beaucoup à https://etienner.fr/flickr-json
var urlFlickr = "https://api.flickr.com/services/rest/?method=flickr.photosets.getPhotos&api_key=79672885f8a018343cd8849f57e8a50a&photoset_id=72157686701939221&extras=original_format&format=json&jsoncallback=?"; 
//var urlFlickr = "https://api.flickr.com/services/rest/?method=flickr.photosets.getPhotos&api_key=79672885f8a018343cd8849f57e8a50a&photoset_id=72157689942197932&extras=original_format&format=json&jsoncallback=?";
$.getJSON(urlFlickr,
function(data){
	dataPhoto = data;
    /* Debut de la boucle
    $.each(data.photoset.photo, function(i,item){
        // Sockage de l'image dans une variable
        var photo = 'http://farm' + item.farm + '.static.flickr.com/' + item.server + '/' + item.id + '_' + item.secret + '_s.jpg';
        // Sockage de l'url dans une variable
        var url= 'http://farm' + item.farm + '.static.flickr.com/' + item.server + '/' + item.id + '_' + item.secret + '_c.jpg';
        // Affichage des images dans la balise ul#images avec le l'url dans la balise li
        $("<img/>").attr({src: photo, alt: item.title}).appendTo("#images").wrap("<li id='photo"+i+"'><a href=' "+ url +"' title=' "+ item.title +" ' ></a></li>");
    });
    Fin de la boucle*/

	//récupération des données du formulaire google
	var url = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vT4vIu2pcoPH6Vng35aQzwRAxQV9ogt8B9fyp-3cr1aVEdEh5rAhDfj_sB7OYoeLRZGalhq1trkCLRd/pub?gid=2097717787&single=true&output=csv';
    //var url = "data/LPDesignWebMobile_17-18.csv";        
	d3.csv(url, function(data) {
		dataForm = data;
		
		//réorganise les datas
		dataForm.forEach(function(d){
			d.reponses = {'besoins':[],'competences':[],'outils':[]};
			for (let i in d) {
				var prop = i.substring(i.indexOf("[")+1,i.indexOf("]")); 
				var v = d[i];
				var n = vals[v];
				if(i.indexOf("besoins")>0){
					d.reponses.besoins.push({'prop':prop,'importance':n,'expression':v,'id':d['num photo']});
					//d.reponses.push({'besoins':prop,'val':n,'lib':v});
				}
				if(i.indexOf("compétences")>0){
					d.reponses.competences.push({'prop':prop,'importance':n,'expression':v,'id':d['num photo']});
				}
				if(i.indexOf("outils utilisez")>0){
					d.reponses.outils.push({'prop':prop,'importance':n,'expression':v,'id':d['num photo']});
				}							
			}
		});		
		
		
		/*construction simple
		var arrDiv = d3.select("#container")
	  		.selectAll("div")
	  		.data(data)
	  		.enter().append("div")
		    .text(function(d) { 
		    		return d['Votre prénom'].toLowerCase() + ' ' + d['Votre nom'].toLowerCase(); 
		    	});		
		arrDiv.append("img")
		    .attr('src',function(d) { 
		    		var item = dataPhoto.photoset.photo[d['num photo']];
		        var src = 'http://farm' + item.farm + '.static.flickr.com/' + item.server + '/' + item.id + '_' + item.secret + '_s.jpg';
	    			return src; 
	    		});
		*/
		
		/*construction bootstrap
		merci à https://getbootstrap.com/docs/4.0/components/card/
			<div class="col-sm-3 mb-4">
		  <div class="card">
				<img class="card-img img-fluid" src="<?php echo $picture_link; ?>" alt="Card image">
				<p class="card-text"><?php echo $value['Prénom']; ?> <br> <?php echo $value['Nom']; ?> <br>
				<small class="text-muted"><?php echo $value['E-mail']; ?></small>
				</p>
		  </div>
		</div>
		*/
		var cards = d3.select('#etuCards').selectAll(".col-sm-4 mb-4").data(dataForm).enter()
			.append('div').attr('class','col-sm-4 mb-4')
			.append("div").attr('class','card');
	  	cards.append("img")
	  			.attr('id',function(d) {return 'imgCard'+d['num photo']})
	  			.attr('class','card-img-top')
	  			.attr('src',function(d) { 
                    var item = dataPhoto.photoset.photo[d['num photo']];
                    var src =  "http://www.samszo.univ-paris8.fr/ChaoticumPapillonae/CreaPapiDynaAnim.php?anim=0&larg=60&haut=60&id=svgPapiLogo"+d['num photo'];
                    if(item)
    			        src = 'http://farm' + item.farm + '.static.flickr.com/' + item.server + '/' + item.id + '_' + item.secret + '_q.jpg';
		    		return src; 
				});
	  	//ajoute l'overlay sur l'image pour le tooltip du diagramme
	  	cards.append("div")
	  			.attr('id',function(d) {return 'imgOver'+d['num photo']})
	  			.attr('class','card-img-overlay')
	  			.style('height','50%');
  		//ajoute le corps de la carte
		var cardBody = cards.append('div').attr('class','card-body');
		cardBody.append('h4').attr('class','card-title')	  			
	    			.text(function(d) { 
		    			return d['Votre prénom'].toLowerCase(); 
				    		});
		cardBody.append('h5').attr('class','card-title')	  			
			.text(function(d) { 
				return d['Votre nom'].toLowerCase(); 
		    		});
		//construction du layout pour les graphiques
		var html = '<div class="container"><div class="row">';
		html += '<div id="etudNum__Col1" class="col-sm"></div>';
		html += '<div id="etudNum__Col2" class="col-sm"></div>';
		html += '<div id="etudNum__Col3" class="col-sm"></div>';
		html += '</div></div>';
		cardBody.append('div').attr('class','card-text').attr('id',function(d, i) { return 'etudNum_'+i; })
			.html(function(d, i) { return html.replace(/__/gi, "_"+i+"_");});	  			
		cards.append('div').attr('class','card-footer')
			.append('small').attr('class','text-muted')
			.text(function(d, i) {
					//charge le graph des réponses
					drawGraphReponse("#etudNum_"+i+"_Col1", 'Besoins', d.reponses.besoins);
					drawGraphReponse("#etudNum_"+i+"_Col2", 'Compétences', d.reponses.competences);
					drawGraphReponse("#etudNum_"+i+"_Col3", 'Outils', d.reponses.outils);
		    			return d['Votre mail'].toLowerCase(); 
				    		});		
	});
});

function drawGraphReponse(idE, titre, data){
	/*à voir si dimple marche mieux
    var svg = dimple.newSvg("#"+idE, 200, 200);
    var myChart = new dimple.chart(svg, data);
    myChart.setBounds(6, 6, 184, 184)
    myChart.addMeasureAxis("p", "val");
    var outerRing = myChart.addSeries("besoins", dimple.plot.pie);
    var innerRing = myChart.addSeries("compétences", dimple.plot.pie);
    var centerRing = myChart.addSeries("outils", dimple.plot.pie);
    // Negatives are calculated from outside edge, positives from center
    outerRing.innerRadius = "-10px";
    innerRing.outerRadius = "-20px";
    innerRing.innerRadius = "-30px";
    centerRing.outerRadius = "-40px";
    centerRing.innerRadius = "-50px";
    //myChart.addLegend(500, 20, 90, 300, "left");
    myChart.draw();
    */
    //
	var donut = donutChart()
	    .width(160)
	    .height(160)
	    .cornerRadius(3) // sets how rounded the corners are on each slice
	    .padAngle(0.015) // effectively dictates the gap between slices
	    .variable('importance')
	    .category('prop')
	    .title(titre);
    d3.select(idE)
        .datum(data) // bind data to the div
        .call(donut); // draw chart in div
}

//merci à https://bl.ocks.org/mbhall88/b2504f8f3e384de4ff2b9dfa60f325e2
function donutChart() {
    var width,
        height,
        margin = {top: 10, right: 10, bottom: 10, left: 10},
        colour = d3.scaleOrdinal(d3.schemeCategory20c), // colour scheme
        variable, // value in data that will dictate proportions on chart
        category, // compare data by
        padAngle, // effectively dictates the gap between slices
        floatFormat = d3.format('.4r'),
        cornerRadius, // sets how rounded the corners are on each slice
        percentFormat = d3.format(',.2%'),
        title;

    function chart(selection){
        selection.each(function(data) {
            // generate chart

            // ===========================================================================================
            // Set up constructors for making donut. See https://github.com/d3/d3-shape/blob/master/README.md
            var radius = Math.min(width, height) / 2;

            // creates a new pie generator
            var pie = d3.pie()
                .value(function(d) { return floatFormat(d[variable]); })
                .sort(null);

            // contructs and arc generator. This will be used for the donut. The difference between outer and inner
            // radius will dictate the thickness of the donut
            var arc = d3.arc()
                .outerRadius(radius * 0.8)
                .innerRadius(radius * 0.6)
                .cornerRadius(cornerRadius)
                .padAngle(padAngle);

            // this arc is used for aligning the text labels
            var outerArc = d3.arc()
                .outerRadius(radius * 0.9)
                .innerRadius(radius * 0.9);
            // ===========================================================================================

            // ===========================================================================================
            // append the svg object to the selection
            var svg = selection.append('svg')
                .attr('width', width + margin.left + margin.right)
                .attr('height', height + margin.top + margin.bottom)
              .append('g')
                .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');
            // ===========================================================================================

            	//ajoute le titre
            	svg.append('text')
                .html(title)            
                .attr('text-anchor', 'middle');
            	
            // ===========================================================================================
            // g elements to keep elements within svg modular
            svg.append('g').attr('class', 'slices');
            svg.append('g').attr('class', 'labelName');
            svg.append('g').attr('class', 'lines');
            // ===========================================================================================

            // ===========================================================================================
            // add and colour the donut slices
            var path = svg.select('.slices')
                .datum(data).selectAll('path')
                .data(pie)
              .enter().append('path')
                .attr('fill', function(d) { return colour(d.data[category]); })
                .attr('d', arc);
            // ===========================================================================================

            // ===========================================================================================
            /* add text labels
            var label = svg.select('.labelName').selectAll('text')
                .data(pie)
              .enter().append('text')
                .attr('dy', '.35em')
                .html(function(d) {
                    // add "key: value" for given category. Number inside tspan is bolded in stylesheet.
                    return d.data[category] + ': <tspan>' + percentFormat(d.data[variable]) + '</tspan>';
                })
                .attr('transform', function(d) {

                    // effectively computes the centre of the slice.
                    // see https://github.com/d3/d3-shape/blob/master/README.md#arc_centroid
                    var pos = outerArc.centroid(d);

                    // changes the point to be on left or right depending on where label is.
                    pos[0] = radius * 0.95 * (midAngle(d) < Math.PI ? 1 : -1);
                    return 'translate(' + pos + ')';
                })
                .style('text-anchor', function(d) {
                    // if slice centre is on the left, anchor text to start, otherwise anchor to end
                    return (midAngle(d)) < Math.PI ? 'start' : 'end';
                });
            */
            // ===========================================================================================

            /* ===========================================================================================
            // add lines connecting labels to slice. A polyline creates straight lines connecting several points
            var polyline = svg.select('.lines')
                .selectAll('polyline')
                .data(pie)
              .enter().append('polyline')
                .attr('points', function(d) {

                    // see label transform function for explanations of these three lines.
                    var pos = outerArc.centroid(d);
                    pos[0] = radius * 0.95 * (midAngle(d) < Math.PI ? 1 : -1);
                    return [arc.centroid(d), outerArc.centroid(d), pos]
                });
            */
            // ===========================================================================================

            // ===========================================================================================
            // add tooltip to mouse events on slices and labels
            d3.selectAll('.labelName text, .slices path').call(toolTip);
            // ===========================================================================================

            // ===========================================================================================
            // Functions

            // calculates the angle for the middle of a slice
            function midAngle(d) { return d.startAngle + (d.endAngle - d.startAngle) / 2; }

            // function that creates and adds the tool tip to a selected element
            function toolTip(selection) {

                // add tooltip (svg circle element) when mouse enters label or slice
                selection.on('mouseenter', function (data) {
                	
                		//rend l'image trnasparente
                		d3.select('#imgCard'+data.data.id).style('opacity', 0.35);
                		//affiche le texte
                		d3.select('#imgOver'+data.data.id).html(toolTipHTML(data));                		

                    /*
                		svg.append('text')
                        .attr('class', 'toolCircle')
                        .attr('dy', -15) // hard-coded. can adjust this to adjust text vertical alignment in tooltip
                        .html(toolTipHTML(data)) // add text to the circle.
                        .style('font-size', '.9em')
                        .style('text-anchor', 'middle'); // centres text in tooltip

                    svg.append('circle')
                        .attr('class', 'toolCircle')
                        .attr('r', radius * 0.55) // radius of tooltip circle
                        .style('fill', colour(data.data[category])) // colour based on category mouse is over
                        .style('fill-opacity', 0.35);
					*/
                });

                // remove the tooltip when mouse leaves the slice/label
                selection.on('mouseout', function (data) {
                    d3.selectAll('.toolCircle').remove();
	            		//rend l'image normal
	            		d3.select('#imgCard'+data.data.id).style('opacity', 1);
	            		//supprime le texte
	            		d3.select('#imgOver'+data.data.id).html("");                		                    
                });
            }

            // function to create the HTML string for the tool tip. Loops through each key in data object
            // and returns the html string key: value
            function toolTipHTML(data) {

            		var tip = '<h6 class="card-title">'+data.data.prop+'</h6>'
            		tip += '<p class="card-text">'+data.data.expression+'</p>';
                /*
            		var tip = '',
                    i   = 0;

                for (var key in data.data) {

                    // if value is a number, format it as a percentage
                    var value = (!isNaN(parseFloat(data.data[key]))) ? percentFormat(data.data[key]) : data.data[key];

                    // leave off 'dy' attr for first tspan so the 'dy' attr on text element works. The 'dy' attr on
                    // tspan effectively imitates a line break.
                    if (i === 0) tip += '<tspan x="0">' + key + ': ' + value + '</tspan>';
                    else tip += '<tspan x="0" dy="1.2em">' + key + ': ' + value + '</tspan>';
                    i++;
                }
				*/
                return tip;
            }
            // ===========================================================================================

        });
    }

    // getter and setter functions. See Mike Bostocks post "Towards Reusable Charts" for a tutorial on how this works.
    chart.width = function(value) {
        if (!arguments.length) return width;
        width = value;
        return chart;
    };

    chart.height = function(value) {
        if (!arguments.length) return height;
        height = value;
        return chart;
    };

    chart.margin = function(value) {
        if (!arguments.length) return margin;
        margin = value;
        return chart;
    };

    chart.radius = function(value) {
        if (!arguments.length) return radius;
        radius = value;
        return chart;
    };

    chart.padAngle = function(value) {
        if (!arguments.length) return padAngle;
        padAngle = value;
        return chart;
    };

    chart.cornerRadius = function(value) {
        if (!arguments.length) return cornerRadius;
        cornerRadius = value;
        return chart;
    };

    chart.colour = function(value) {
        if (!arguments.length) return colour;
        colour = value;
        return chart;
    };

    chart.variable = function(value) {
        if (!arguments.length) return variable;
        variable = value;
        return chart;
    };

    chart.category = function(value) {
        if (!arguments.length) return category;
        category = value;
        return chart;
    };

    chart.title = function(value) {
        if (!arguments.length) return title;
        title = value;
        return chart;
    };
    
    return chart;
}

//Fin appel JSON

</script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js" integrity="sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js" integrity="sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ" crossorigin="anonymous"></script>

</body>
</html>